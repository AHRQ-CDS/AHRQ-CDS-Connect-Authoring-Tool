// Generated from cql.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var cqlListener = require('./cqlListener').cqlListener;
var cqlVisitor = require('./cqlVisitor').cqlVisitor;

var grammarFileName = "cql.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00a4\u041f\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0003\u0002\u0005\u0002\u00ae\n\u0002\u0003\u0002\u0007",
    "\u0002\u00b1\n\u0002\f\u0002\u000e\u0002\u00b4\u000b\u0002\u0003\u0002",
    "\u0007\u0002\u00b7\n\u0002\f\u0002\u000e\u0002\u00ba\u000b\u0002\u0003",
    "\u0002\u0007\u0002\u00bd\n\u0002\f\u0002\u000e\u0002\u00c0\u000b\u0002",
    "\u0003\u0002\u0007\u0002\u00c3\n\u0002\f\u0002\u000e\u0002\u00c6\u000b",
    "\u0002\u0003\u0002\u0007\u0002\u00c9\n\u0002\f\u0002\u000e\u0002\u00cc",
    "\u000b\u0002\u0003\u0002\u0007\u0002\u00cf\n\u0002\f\u0002\u000e\u0002",
    "\u00d2\u000b\u0002\u0003\u0002\u0007\u0002\u00d5\n\u0002\f\u0002\u000e",
    "\u0002\u00d8\u000b\u0002\u0003\u0002\u0007\u0002\u00db\n\u0002\f\u0002",
    "\u000e\u0002\u00de\u000b\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u00e4\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u00ea\n\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00f0\n\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00f4\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\b\u0005\b\u00fb\n\b\u0003\b\u0003\b\u0003\b\u0005\b\u0100",
    "\n\b\u0003\b\u0003\b\u0005\b\u0104\n\b\u0003\t\u0005\t\u0107\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u010f\n\t\u0003\n",
    "\u0005\n\u0112\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u011a\n\n\u0003\n\u0005\n\u011d\n\n\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0124\n\u000b\f\u000b\u000e",
    "\u000b\u0127\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u012e\n\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0005",
    "\u000e\u0135\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u013e\n\u000e\u0003",
    "\u000f\u0005\u000f\u0141\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u014a\n",
    "\u000f\f\u000f\u000e\u000f\u014d\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u0151\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0156\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u0167\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u016c",
    "\n\u0016\f\u0016\u000e\u0016\u016f\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a",
    "\u0184\n\u001a\f\u001a\u000e\u001a\u0187\u000b\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0193\n\u001c\f\u001c\u000e",
    "\u001c\u0196\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u019d\n\u001d\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u01a1\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0005 \u01ac\n \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u01b4\n \f \u000e \u01b7",
    "\u000b \u0005 \u01b9\n \u0003 \u0003 \u0003 \u0005 \u01be\n \u0003 ",
    "\u0003 \u0003 \u0005 \u01c3\n \u0003!\u0003!\u0003!\u0003\"\u0003\"",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u01d0\n#\u0003$\u0003",
    "$\u0003$\u0003%\u0003%\u0003&\u0003&\u0005&\u01d9\n&\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u01eb\n)\u0003)\u0005)\u01ee\n",
    ")\u0003)\u0003)\u0003*\u0003*\u0003+\u0003+\u0005+\u01f6\n+\u0003,\u0003",
    ",\u0003-\u0003-\u0005-\u01fc\n-\u0003-\u0007-\u01ff\n-\f-\u000e-\u0202",
    "\u000b-\u0003-\u0005-\u0205\n-\u0003-\u0005-\u0208\n-\u0003-\u0005-",
    "\u020b\n-\u0003.\u0005.\u020e\n.\u0003.\u0003.\u0003.\u0007.\u0213\n",
    ".\f.\u000e.\u0216\u000b.\u0003/\u0003/\u0003/\u0003/\u0007/\u021c\n",
    "/\f/\u000e/\u021f\u000b/\u00030\u00030\u00030\u00030\u00031\u00031\u0003",
    "1\u00032\u00032\u00052\u022a\n2\u00032\u00032\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00073\u0234\n3\f3\u000e3\u0237\u000b3\u00053\u0239",
    "\n3\u00034\u00034\u00035\u00035\u00055\u023f\n5\u00036\u00036\u0003",
    "6\u00076\u0244\n6\f6\u000e6\u0247\u000b6\u00036\u00036\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00057\u025a\n7\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0005",
    "7\u026a\n7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00057\u0279\n7\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00057\u028b\n7\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00057\u0293\n7\u00037\u00037\u00037\u00037\u00037\u00077\u029a\n",
    "7\f7\u000e7\u029d\u000b7\u00038\u00038\u00039\u00039\u00039\u00039\u0005",
    "9\u02a5\n9\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u02df\n;\u0003",
    ";\u0006;\u02e2\n;\r;\u000e;\u02e3\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u02f1\n;\u0005;\u02f3",
    "\n;\u0005;\u02f5\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0007;\u0308\n;\f;\u000e;\u030b\u000b;\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003",
    "@\u0003A\u0003A\u0005A\u031d\nA\u0003A\u0003A\u0003A\u0005A\u0322\n",
    "A\u0003B\u0005B\u0325\nB\u0003B\u0003B\u0003B\u0005B\u032a\nB\u0005",
    "B\u032c\nB\u0003C\u0005C\u032f\nC\u0003C\u0003C\u0005C\u0333\nC\u0003",
    "C\u0003C\u0005C\u0337\nC\u0003C\u0005C\u033a\nC\u0003C\u0005C\u033d",
    "\nC\u0003C\u0003C\u0005C\u0341\nC\u0003C\u0005C\u0344\nC\u0003C\u0005",
    "C\u0347\nC\u0003C\u0005C\u034a\nC\u0003C\u0003C\u0005C\u034e\nC\u0003",
    "C\u0005C\u0351\nC\u0003C\u0005C\u0354\nC\u0003C\u0003C\u0005C\u0358",
    "\nC\u0003C\u0005C\u035b\nC\u0003C\u0005C\u035e\nC\u0003C\u0005C\u0361",
    "\nC\u0003C\u0003C\u0003C\u0003C\u0005C\u0367\nC\u0003C\u0003C\u0005",
    "C\u036b\nC\u0003C\u0005C\u036e\nC\u0003C\u0003C\u0005C\u0372\nC\u0003",
    "C\u0005C\u0375\nC\u0003C\u0003C\u0005C\u0379\nC\u0003C\u0003C\u0005",
    "C\u037d\nC\u0005C\u037f\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u038e\nD\u0003",
    "E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0005F\u039c\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003H\u0005H\u03a6\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0007H\u03ad",
    "\nH\fH\u000eH\u03b0\u000bH\u0005H\u03b2\nH\u0003H\u0003H\u0003I\u0003",
    "I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0007J\u03c0",
    "\nJ\fJ\u000eJ\u03c3\u000bJ\u0005J\u03c5\nJ\u0003J\u0003J\u0003K\u0003",
    "K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u03d2\nL\u0005",
    "L\u03d4\nL\u0003L\u0003L\u0003L\u0003L\u0007L\u03da\nL\fL\u000eL\u03dd",
    "\u000bL\u0005L\u03df\nL\u0003L\u0003L\u0003M\u0003M\u0003M\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0005N\u03eb\nN\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0007O\u03f2\nO\fO\u000eO\u03f5\u000bO\u0003O\u0003O\u0005O\u03f9",
    "\nO\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0005R\u0405\nR\u0003S\u0003S\u0003S\u0005S\u040a\nS\u0003S\u0003",
    "S\u0003T\u0003T\u0003T\u0007T\u0411\nT\fT\u000eT\u0414\u000bT\u0003",
    "U\u0003U\u0005U\u0418\nU\u0003V\u0003V\u0003V\u0005V\u041d\nV\u0003",
    "V\u0002\u0004ltW\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u0002\u001f\u0003\u0002\b\t\u0003\u0002-.\u0003\u000214\u0004\u0002",
    "\u0018\u0019BC\u0003\u0002DG\u0004\u0002((HH\u0003\u0002IJ\u0003\u0002",
    "LO\u0003\u000279\u0004\u000255::\u0003\u0002PW\u0003\u0002[b\u0003\u0002",
    "ef\u0003\u0002gh\u0003\u0002op\u0004\u0002..{{\u0003\u0002|}\u0003\u0002",
    "ru\u0004\u0002efvv\u0003\u0002\u0080\u0081\u0003\u0002\u0082\u0083\u0003",
    "\u0002\u0084\u0085\u0003\u0002\u0087\u0088\u0003\u0002\u008a\u008c\u0003",
    "\u0002\u008f\u0090\u0003\u000289\u0004\u0002  \'\'\u0004\u0002!!))\n",
    "\u0002\u0004\u0004\u0014\u0014\u0016\u0016XZgh\u0094\u0096\u009b\u009b",
    "\u009e\u009f\u0002\u0483\u0002\u00ad\u0003\u0002\u0002\u0002\u0004\u00df",
    "\u0003\u0002\u0002\u0002\u0006\u00e5\u0003\u0002\u0002\u0002\b\u00eb",
    "\u0003\u0002\u0002\u0002\n\u00f5\u0003\u0002\u0002\u0002\f\u00f7\u0003",
    "\u0002\u0002\u0002\u000e\u00fa\u0003\u0002\u0002\u0002\u0010\u0106\u0003",
    "\u0002\u0002\u0002\u0012\u0111\u0003\u0002\u0002\u0002\u0014\u011e\u0003",
    "\u0002\u0002\u0002\u0016\u012d\u0003\u0002\u0002\u0002\u0018\u0131\u0003",
    "\u0002\u0002\u0002\u001a\u0134\u0003\u0002\u0002\u0002\u001c\u0140\u0003",
    "\u0002\u0002\u0002\u001e\u0155\u0003\u0002\u0002\u0002 \u0159\u0003",
    "\u0002\u0002\u0002\"\u015b\u0003\u0002\u0002\u0002$\u015d\u0003\u0002",
    "\u0002\u0002&\u015f\u0003\u0002\u0002\u0002(\u0166\u0003\u0002\u0002",
    "\u0002*\u016d\u0003\u0002\u0002\u0002,\u0172\u0003\u0002\u0002\u0002",
    ".\u0174\u0003\u0002\u0002\u00020\u0179\u0003\u0002\u0002\u00022\u017e",
    "\u0003\u0002\u0002\u00024\u018a\u0003\u0002\u0002\u00026\u018d\u0003",
    "\u0002\u0002\u00028\u019c\u0003\u0002\u0002\u0002:\u019e\u0003\u0002",
    "\u0002\u0002<\u01a6\u0003\u0002\u0002\u0002>\u01a9\u0003\u0002\u0002",
    "\u0002@\u01c4\u0003\u0002\u0002\u0002B\u01c7\u0003\u0002\u0002\u0002",
    "D\u01cf\u0003\u0002\u0002\u0002F\u01d1\u0003\u0002\u0002\u0002H\u01d4",
    "\u0003\u0002\u0002\u0002J\u01d8\u0003\u0002\u0002\u0002L\u01da\u0003",
    "\u0002\u0002\u0002N\u01df\u0003\u0002\u0002\u0002P\u01e4\u0003\u0002",
    "\u0002\u0002R\u01f1\u0003\u0002\u0002\u0002T\u01f5\u0003\u0002\u0002",
    "\u0002V\u01f7\u0003\u0002\u0002\u0002X\u01f9\u0003\u0002\u0002\u0002",
    "Z\u020d\u0003\u0002\u0002\u0002\\\u0217\u0003\u0002\u0002\u0002^\u0220",
    "\u0003\u0002\u0002\u0002`\u0224\u0003\u0002\u0002\u0002b\u0227\u0003",
    "\u0002\u0002\u0002d\u022d\u0003\u0002\u0002\u0002f\u023a\u0003\u0002",
    "\u0002\u0002h\u023c\u0003\u0002\u0002\u0002j\u0245\u0003\u0002\u0002",
    "\u0002l\u0269\u0003\u0002\u0002\u0002n\u029e\u0003\u0002\u0002\u0002",
    "p\u02a4\u0003\u0002\u0002\u0002r\u02a6\u0003\u0002\u0002\u0002t\u02f4",
    "\u0003\u0002\u0002\u0002v\u030c\u0003\u0002\u0002\u0002x\u0311\u0003",
    "\u0002\u0002\u0002z\u0314\u0003\u0002\u0002\u0002|\u0316\u0003\u0002",
    "\u0002\u0002~\u0318\u0003\u0002\u0002\u0002\u0080\u0321\u0003\u0002",
    "\u0002\u0002\u0082\u032b\u0003\u0002\u0002\u0002\u0084\u037e\u0003\u0002",
    "\u0002\u0002\u0086\u038d\u0003\u0002\u0002\u0002\u0088\u038f\u0003\u0002",
    "\u0002\u0002\u008a\u039b\u0003\u0002\u0002\u0002\u008c\u039d\u0003\u0002",
    "\u0002\u0002\u008e\u03a5\u0003\u0002\u0002\u0002\u0090\u03b5\u0003\u0002",
    "\u0002\u0002\u0092\u03b9\u0003\u0002\u0002\u0002\u0094\u03c8\u0003\u0002",
    "\u0002\u0002\u0096\u03d3\u0003\u0002\u0002\u0002\u0098\u03e2\u0003\u0002",
    "\u0002\u0002\u009a\u03e5\u0003\u0002\u0002\u0002\u009c\u03ec\u0003\u0002",
    "\u0002\u0002\u009e\u03fa\u0003\u0002\u0002\u0002\u00a0\u03fc\u0003\u0002",
    "\u0002\u0002\u00a2\u0404\u0003\u0002\u0002\u0002\u00a4\u0406\u0003\u0002",
    "\u0002\u0002\u00a6\u040d\u0003\u0002\u0002\u0002\u00a8\u0415\u0003\u0002",
    "\u0002\u0002\u00aa\u041c\u0003\u0002\u0002\u0002\u00ac\u00ae\u0005\u0004",
    "\u0003\u0002\u00ad\u00ac\u0003\u0002\u0002\u0002\u00ad\u00ae\u0003\u0002",
    "\u0002\u0002\u00ae\u00b2\u0003\u0002\u0002\u0002\u00af\u00b1\u0005\u0006",
    "\u0004\u0002\u00b0\u00af\u0003\u0002\u0002\u0002\u00b1\u00b4\u0003\u0002",
    "\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002",
    "\u0002\u0002\u00b3\u00b8\u0003\u0002\u0002\u0002\u00b4\u00b2\u0003\u0002",
    "\u0002\u0002\u00b5\u00b7\u0005\b\u0005\u0002\u00b6\u00b5\u0003\u0002",
    "\u0002\u0002\u00b7\u00ba\u0003\u0002\u0002\u0002\u00b8\u00b6\u0003\u0002",
    "\u0002\u0002\u00b8\u00b9\u0003\u0002\u0002\u0002\u00b9\u00be\u0003\u0002",
    "\u0002\u0002\u00ba\u00b8\u0003\u0002\u0002\u0002\u00bb\u00bd\u0005\u0010",
    "\t\u0002\u00bc\u00bb\u0003\u0002\u0002\u0002\u00bd\u00c0\u0003\u0002",
    "\u0002\u0002\u00be\u00bc\u0003\u0002\u0002\u0002\u00be\u00bf\u0003\u0002",
    "\u0002\u0002\u00bf\u00c4\u0003\u0002\u0002\u0002\u00c0\u00be\u0003\u0002",
    "\u0002\u0002\u00c1\u00c3\u0005\u0012\n\u0002\u00c2\u00c1\u0003\u0002",
    "\u0002\u0002\u00c3\u00c6\u0003\u0002\u0002\u0002\u00c4\u00c2\u0003\u0002",
    "\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00ca\u0003\u0002",
    "\u0002\u0002\u00c6\u00c4\u0003\u0002\u0002\u0002\u00c7\u00c9\u0005\u001a",
    "\u000e\u0002\u00c8\u00c7\u0003\u0002\u0002\u0002\u00c9\u00cc\u0003\u0002",
    "\u0002\u0002\u00ca\u00c8\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002",
    "\u0002\u0002\u00cb\u00d0\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002",
    "\u0002\u0002\u00cd\u00cf\u0005\u001c\u000f\u0002\u00ce\u00cd\u0003\u0002",
    "\u0002\u0002\u00cf\u00d2\u0003\u0002\u0002\u0002\u00d0\u00ce\u0003\u0002",
    "\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d6\u0003\u0002",
    "\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d3\u00d5\u0005\u000e",
    "\b\u0002\u00d4\u00d3\u0003\u0002\u0002\u0002\u00d5\u00d8\u0003\u0002",
    "\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002",
    "\u0002\u0002\u00d7\u00dc\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003\u0002",
    "\u0002\u0002\u00d9\u00db\u00058\u001d\u0002\u00da\u00d9\u0003\u0002",
    "\u0002\u0002\u00db\u00de\u0003\u0002\u0002\u0002\u00dc\u00da\u0003\u0002",
    "\u0002\u0002\u00dc\u00dd\u0003\u0002\u0002\u0002\u00dd\u0003\u0003\u0002",
    "\u0002\u0002\u00de\u00dc\u0003\u0002\u0002\u0002\u00df\u00e0\u0007\u0003",
    "\u0002\u0002\u00e0\u00e3\u0005\u009eP\u0002\u00e1\u00e2\u0007\u0004",
    "\u0002\u0002\u00e2\u00e4\u0005$\u0013\u0002\u00e3\u00e1\u0003\u0002",
    "\u0002\u0002\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u0005\u0003\u0002",
    "\u0002\u0002\u00e5\u00e6\u0007\u0005\u0002\u0002\u00e6\u00e9\u0005,",
    "\u0017\u0002\u00e7\u00e8\u0007\u0004\u0002\u0002\u00e8\u00ea\u0005$",
    "\u0013\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002",
    "\u0002\u0002\u00ea\u0007\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007\u0006",
    "\u0002\u0002\u00ec\u00ef\u0005\u009eP\u0002\u00ed\u00ee\u0007\u0004",
    "\u0002\u0002\u00ee\u00f0\u0005$\u0013\u0002\u00ef\u00ed\u0003\u0002",
    "\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002\u0002\u00f0\u00f3\u0003\u0002",
    "\u0002\u0002\u00f1\u00f2\u0007\u0007\u0002\u0002\u00f2\u00f4\u0005\n",
    "\u0006\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002",
    "\u0002\u0002\u00f4\t\u0003\u0002\u0002\u0002\u00f5\u00f6\u0005\u009e",
    "P\u0002\u00f6\u000b\u0003\u0002\u0002\u0002\u00f7\u00f8\t\u0002\u0002",
    "\u0002\u00f8\r\u0003\u0002\u0002\u0002\u00f9\u00fb\u0005\f\u0007\u0002",
    "\u00fa\u00f9\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002",
    "\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fd\u0007\n\u0002\u0002",
    "\u00fd\u00ff\u0005\u009eP\u0002\u00fe\u0100\u0005(\u0015\u0002\u00ff",
    "\u00fe\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002\u0002\u0100",
    "\u0103\u0003\u0002\u0002\u0002\u0101\u0102\u0007\u000b\u0002\u0002\u0102",
    "\u0104\u0005l7\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0103\u0104",
    "\u0003\u0002\u0002\u0002\u0104\u000f\u0003\u0002\u0002\u0002\u0105\u0107",
    "\u0005\f\u0007\u0002\u0106\u0105\u0003\u0002\u0002\u0002\u0106\u0107",
    "\u0003\u0002\u0002\u0002\u0107\u0108\u0003\u0002\u0002\u0002\u0108\u0109",
    "\u0007\f\u0002\u0002\u0109\u010a\u0005\u009eP\u0002\u010a\u010b\u0007",
    "\r\u0002\u0002\u010b\u010e\u0005 \u0011\u0002\u010c\u010d\u0007\u0004",
    "\u0002\u0002\u010d\u010f\u0005$\u0013\u0002\u010e\u010c\u0003\u0002",
    "\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0011\u0003\u0002",
    "\u0002\u0002\u0110\u0112\u0005\f\u0007\u0002\u0111\u0110\u0003\u0002",
    "\u0002\u0002\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002",
    "\u0002\u0002\u0113\u0114\u0007\u000e\u0002\u0002\u0114\u0115\u0005\u009e",
    "P\u0002\u0115\u0116\u0007\r\u0002\u0002\u0116\u0119\u0005\"\u0012\u0002",
    "\u0117\u0118\u0007\u0004\u0002\u0002\u0118\u011a\u0005$\u0013\u0002",
    "\u0119\u0117\u0003\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002",
    "\u011a\u011c\u0003\u0002\u0002\u0002\u011b\u011d\u0005\u0014\u000b\u0002",
    "\u011c\u011b\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002",
    "\u011d\u0013\u0003\u0002\u0002\u0002\u011e\u011f\u0007\u000f\u0002\u0002",
    "\u011f\u0120\u0007\u0010\u0002\u0002\u0120\u0125\u0005\u0016\f\u0002",
    "\u0121\u0122\u0007\u0011\u0002\u0002\u0122\u0124\u0005\u0016\f\u0002",
    "\u0123\u0121\u0003\u0002\u0002\u0002\u0124\u0127\u0003\u0002\u0002\u0002",
    "\u0125\u0123\u0003\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002\u0002",
    "\u0126\u0128\u0003\u0002\u0002\u0002\u0127\u0125\u0003\u0002\u0002\u0002",
    "\u0128\u0129\u0007\u0012\u0002\u0002\u0129\u0015\u0003\u0002\u0002\u0002",
    "\u012a\u012b\u0005\u0018\r\u0002\u012b\u012c\u0007\u0013\u0002\u0002",
    "\u012c\u012e\u0003\u0002\u0002\u0002\u012d\u012a\u0003\u0002\u0002\u0002",
    "\u012d\u012e\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002",
    "\u012f\u0130\u0005\u009eP\u0002\u0130\u0017\u0003\u0002\u0002\u0002",
    "\u0131\u0132\u0005\u009eP\u0002\u0132\u0019\u0003\u0002\u0002\u0002",
    "\u0133\u0135\u0005\f\u0007\u0002\u0134\u0133\u0003\u0002\u0002\u0002",
    "\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002",
    "\u0136\u0137\u0007\u0014\u0002\u0002\u0137\u0138\u0005\u009eP\u0002",
    "\u0138\u0139\u0007\r\u0002\u0002\u0139\u013a\u0005&\u0014\u0002\u013a",
    "\u013b\u0007\u0015\u0002\u0002\u013b\u013d\u0005\u0016\f\u0002\u013c",
    "\u013e\u0005\u0098M\u0002\u013d\u013c\u0003\u0002\u0002\u0002\u013d",
    "\u013e\u0003\u0002\u0002\u0002\u013e\u001b\u0003\u0002\u0002\u0002\u013f",
    "\u0141\u0005\f\u0007\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0140",
    "\u0141\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002\u0002\u0002\u0142",
    "\u0143\u0007\u0016\u0002\u0002\u0143\u0144\u0005\u009eP\u0002\u0144",
    "\u0145\u0007\r\u0002\u0002\u0145\u0146\u0007\u0010\u0002\u0002\u0146",
    "\u014b\u0005\u001e\u0010\u0002\u0147\u0148\u0007\u0011\u0002\u0002\u0148",
    "\u014a\u0005\u001e\u0010\u0002\u0149\u0147\u0003\u0002\u0002\u0002\u014a",
    "\u014d\u0003\u0002\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0003\u0002\u0002\u0002\u014c\u014e\u0003\u0002\u0002\u0002\u014d",
    "\u014b\u0003\u0002\u0002\u0002\u014e\u0150\u0007\u0012\u0002\u0002\u014f",
    "\u0151\u0005\u0098M\u0002\u0150\u014f\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u001d\u0003\u0002\u0002\u0002\u0152",
    "\u0153\u0005\u0018\r\u0002\u0153\u0154\u0007\u0013\u0002\u0002\u0154",
    "\u0156\u0003\u0002\u0002\u0002\u0155\u0152\u0003\u0002\u0002\u0002\u0155",
    "\u0156\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157",
    "\u0158\u0005\u009eP\u0002\u0158\u001f\u0003\u0002\u0002\u0002\u0159",
    "\u015a\u0007\u00a0\u0002\u0002\u015a!\u0003\u0002\u0002\u0002\u015b",
    "\u015c\u0007\u00a0\u0002\u0002\u015c#\u0003\u0002\u0002\u0002\u015d",
    "\u015e\u0007\u00a0\u0002\u0002\u015e%\u0003\u0002\u0002\u0002\u015f",
    "\u0160\u0007\u00a0\u0002\u0002\u0160\'\u0003\u0002\u0002\u0002\u0161",
    "\u0167\u0005*\u0016\u0002\u0162\u0167\u0005.\u0018\u0002\u0163\u0167",
    "\u00050\u0019\u0002\u0164\u0167\u00052\u001a\u0002\u0165\u0167\u0005",
    "6\u001c\u0002\u0166\u0161\u0003\u0002\u0002\u0002\u0166\u0162\u0003",
    "\u0002\u0002\u0002\u0166\u0163\u0003\u0002\u0002\u0002\u0166\u0164\u0003",
    "\u0002\u0002\u0002\u0166\u0165\u0003\u0002\u0002\u0002\u0167)\u0003",
    "\u0002\u0002\u0002\u0168\u0169\u0005V,\u0002\u0169\u016a\u0007\u0013",
    "\u0002\u0002\u016a\u016c\u0003\u0002\u0002\u0002\u016b\u0168\u0003\u0002",
    "\u0002\u0002\u016c\u016f\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002",
    "\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u0170\u0003\u0002",
    "\u0002\u0002\u016f\u016d\u0003\u0002\u0002\u0002\u0170\u0171\u0005\u009e",
    "P\u0002\u0171+\u0003\u0002\u0002\u0002\u0172\u0173\u0005\u009eP\u0002",
    "\u0173-\u0003\u0002\u0002\u0002\u0174\u0175\u0007\u0017\u0002\u0002",
    "\u0175\u0176\u0007\u0018\u0002\u0002\u0176\u0177\u0005(\u0015\u0002",
    "\u0177\u0178\u0007\u0019\u0002\u0002\u0178/\u0003\u0002\u0002\u0002",
    "\u0179\u017a\u0007\u001a\u0002\u0002\u017a\u017b\u0007\u0018\u0002\u0002",
    "\u017b\u017c\u0005(\u0015\u0002\u017c\u017d\u0007\u0019\u0002\u0002",
    "\u017d1\u0003\u0002\u0002\u0002\u017e\u017f\u0007\u001b\u0002\u0002",
    "\u017f\u0180\u0007\u0010\u0002\u0002\u0180\u0185\u00054\u001b\u0002",
    "\u0181\u0182\u0007\u0011\u0002\u0002\u0182\u0184\u00054\u001b\u0002",
    "\u0183\u0181\u0003\u0002\u0002\u0002\u0184\u0187\u0003\u0002\u0002\u0002",
    "\u0185\u0183\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002",
    "\u0186\u0188\u0003\u0002\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002",
    "\u0188\u0189\u0007\u0012\u0002\u0002\u01893\u0003\u0002\u0002\u0002",
    "\u018a\u018b\u0005\u009eP\u0002\u018b\u018c\u0005(\u0015\u0002\u018c",
    "5\u0003\u0002\u0002\u0002\u018d\u018e\u0007\u001c\u0002\u0002\u018e",
    "\u018f\u0007\u0018\u0002\u0002\u018f\u0194\u0005(\u0015\u0002\u0190",
    "\u0191\u0007\u0011\u0002\u0002\u0191\u0193\u0005(\u0015\u0002\u0192",
    "\u0190\u0003\u0002\u0002\u0002\u0193\u0196\u0003\u0002\u0002\u0002\u0194",
    "\u0192\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195",
    "\u0197\u0003\u0002\u0002\u0002\u0196\u0194\u0003\u0002\u0002\u0002\u0197",
    "\u0198\u0007\u0019\u0002\u0002\u01987\u0003\u0002\u0002\u0002\u0199",
    "\u019d\u0005:\u001e\u0002\u019a\u019d\u0005<\u001f\u0002\u019b\u019d",
    "\u0005> \u0002\u019c\u0199\u0003\u0002\u0002\u0002\u019c\u019a\u0003",
    "\u0002\u0002\u0002\u019c\u019b\u0003\u0002\u0002\u0002\u019d9\u0003",
    "\u0002\u0002\u0002\u019e\u01a0\u0007\u001d\u0002\u0002\u019f\u01a1\u0005",
    "\f\u0007\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003",
    "\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005",
    "\u009eP\u0002\u01a3\u01a4\u0007\r\u0002\u0002\u01a4\u01a5\u0005l7\u0002",
    "\u01a5;\u0003\u0002\u0002\u0002\u01a6\u01a7\u0007\u001e\u0002\u0002",
    "\u01a7\u01a8\u0005\u009eP\u0002\u01a8=\u0003\u0002\u0002\u0002\u01a9",
    "\u01ab\u0007\u001d\u0002\u0002\u01aa\u01ac\u0005\f\u0007\u0002\u01ab",
    "\u01aa\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac",
    "\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\u001f\u0002\u0002\u01ae",
    "\u01af\u0005\u009eP\u0002\u01af\u01b8\u0007 \u0002\u0002\u01b0\u01b5",
    "\u0005@!\u0002\u01b1\u01b2\u0007\u0011\u0002\u0002\u01b2\u01b4\u0005",
    "@!\u0002\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b7\u0003\u0002",
    "\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002",
    "\u0002\u0002\u01b6\u01b9\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003\u0002",
    "\u0002\u0002\u01b8\u01b0\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002",
    "\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01bd\u0007!",
    "\u0002\u0002\u01bb\u01bc\u0007\"\u0002\u0002\u01bc\u01be\u0005(\u0015",
    "\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002",
    "\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u01c2\u0007\r\u0002",
    "\u0002\u01c0\u01c3\u0005B\"\u0002\u01c1\u01c3\u0007#\u0002\u0002\u01c2",
    "\u01c0\u0003\u0002\u0002\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c3",
    "?\u0003\u0002\u0002\u0002\u01c4\u01c5\u0005\u009eP\u0002\u01c5\u01c6",
    "\u0005(\u0015\u0002\u01c6A\u0003\u0002\u0002\u0002\u01c7\u01c8\u0005",
    "l7\u0002\u01c8C\u0003\u0002\u0002\u0002\u01c9\u01d0\u0005P)\u0002\u01ca",
    "\u01d0\u0005j6\u0002\u01cb\u01cc\u0007 \u0002\u0002\u01cc\u01cd\u0005",
    "l7\u0002\u01cd\u01ce\u0007!\u0002\u0002\u01ce\u01d0\u0003\u0002\u0002",
    "\u0002\u01cf\u01c9\u0003\u0002\u0002\u0002\u01cf\u01ca\u0003\u0002\u0002",
    "\u0002\u01cf\u01cb\u0003\u0002\u0002\u0002\u01d0E\u0003\u0002\u0002",
    "\u0002\u01d1\u01d2\u0005D#\u0002\u01d2\u01d3\u0005H%\u0002\u01d3G\u0003",
    "\u0002\u0002\u0002\u01d4\u01d5\u0005\u009eP\u0002\u01d5I\u0003\u0002",
    "\u0002\u0002\u01d6\u01d9\u0005L\'\u0002\u01d7\u01d9\u0005N(\u0002\u01d8",
    "\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d7\u0003\u0002\u0002\u0002\u01d9",
    "K\u0003\u0002\u0002\u0002\u01da\u01db\u0007$\u0002\u0002\u01db\u01dc",
    "\u0005F$\u0002\u01dc\u01dd\u0007%\u0002\u0002\u01dd\u01de\u0005l7\u0002",
    "\u01deM\u0003\u0002\u0002\u0002\u01df\u01e0\u0007&\u0002\u0002\u01e0",
    "\u01e1\u0005F$\u0002\u01e1\u01e2\u0007%\u0002\u0002\u01e2\u01e3\u0005",
    "l7\u0002\u01e3O\u0003\u0002\u0002\u0002\u01e4\u01e5\u0007\'\u0002\u0002",
    "\u01e5\u01ed\u0005*\u0016\u0002\u01e6\u01ea\u0007\r\u0002\u0002\u01e7",
    "\u01e8\u0005R*\u0002\u01e8\u01e9\u0007(\u0002\u0002\u01e9\u01eb\u0003",
    "\u0002\u0002\u0002\u01ea\u01e7\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003",
    "\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ee\u0005",
    "T+\u0002\u01ed\u01e6\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002",
    "\u0002\u0002\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef\u01f0\u0007)",
    "\u0002\u0002\u01f0Q\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005\u009e",
    "P\u0002\u01f2S\u0003\u0002\u0002\u0002\u01f3\u01f6\u0005j6\u0002\u01f4",
    "\u01f6\u0005l7\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f4",
    "\u0003\u0002\u0002\u0002\u01f6U\u0003\u0002\u0002\u0002\u01f7\u01f8",
    "\u0005\u009eP\u0002\u01f8W\u0003\u0002\u0002\u0002\u01f9\u01fb\u0005",
    "Z.\u0002\u01fa\u01fc\u0005\\/\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002",
    "\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u0200\u0003\u0002\u0002\u0002",
    "\u01fd\u01ff\u0005J&\u0002\u01fe\u01fd\u0003\u0002\u0002\u0002\u01ff",
    "\u0202\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0200",
    "\u0201\u0003\u0002\u0002\u0002\u0201\u0204\u0003\u0002\u0002\u0002\u0202",
    "\u0200\u0003\u0002\u0002\u0002\u0203\u0205\u0005`1\u0002\u0204\u0203",
    "\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u0207",
    "\u0003\u0002\u0002\u0002\u0206\u0208\u0005b2\u0002\u0207\u0206\u0003",
    "\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u020a\u0003",
    "\u0002\u0002\u0002\u0209\u020b\u0005d3\u0002\u020a\u0209\u0003\u0002",
    "\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002\u020bY\u0003\u0002",
    "\u0002\u0002\u020c\u020e\u0007\u0015\u0002\u0002\u020d\u020c\u0003\u0002",
    "\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002",
    "\u0002\u0002\u020f\u0214\u0005F$\u0002\u0210\u0211\u0007\u0011\u0002",
    "\u0002\u0211\u0213\u0005F$\u0002\u0212\u0210\u0003\u0002\u0002\u0002",
    "\u0213\u0216\u0003\u0002\u0002\u0002\u0214\u0212\u0003\u0002\u0002\u0002",
    "\u0214\u0215\u0003\u0002\u0002\u0002\u0215[\u0003\u0002\u0002\u0002",
    "\u0216\u0214\u0003\u0002\u0002\u0002\u0217\u0218\u0007*\u0002\u0002",
    "\u0218\u021d\u0005^0\u0002\u0219\u021a\u0007\u0011\u0002\u0002\u021a",
    "\u021c\u0005^0\u0002\u021b\u0219\u0003\u0002\u0002\u0002\u021c\u021f",
    "\u0003\u0002\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d\u021e",
    "\u0003\u0002\u0002\u0002\u021e]\u0003\u0002\u0002\u0002\u021f\u021d",
    "\u0003\u0002\u0002\u0002\u0220\u0221\u0005\u009eP\u0002\u0221\u0222",
    "\u0007\r\u0002\u0002\u0222\u0223\u0005l7\u0002\u0223_\u0003\u0002\u0002",
    "\u0002\u0224\u0225\u0007+\u0002\u0002\u0225\u0226\u0005l7\u0002\u0226",
    "a\u0003\u0002\u0002\u0002\u0227\u0229\u0007,\u0002\u0002\u0228\u022a",
    "\t\u0003\u0002\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0005l7\u0002\u022cc\u0003\u0002\u0002\u0002\u022d\u0238\u0007/\u0002",
    "\u0002\u022e\u0239\u0005f4\u0002\u022f\u0230\u00070\u0002\u0002\u0230",
    "\u0235\u0005h5\u0002\u0231\u0232\u0007\u0011\u0002\u0002\u0232\u0234",
    "\u0005h5\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u0237\u0003",
    "\u0002\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003",
    "\u0002\u0002\u0002\u0236\u0239\u0003\u0002\u0002\u0002\u0237\u0235\u0003",
    "\u0002\u0002\u0002\u0238\u022e\u0003\u0002\u0002\u0002\u0238\u022f\u0003",
    "\u0002\u0002\u0002\u0239e\u0003\u0002\u0002\u0002\u023a\u023b\t\u0004",
    "\u0002\u0002\u023bg\u0003\u0002\u0002\u0002\u023c\u023e\u0005t;\u0002",
    "\u023d\u023f\u0005f4\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023e",
    "\u023f\u0003\u0002\u0002\u0002\u023fi\u0003\u0002\u0002\u0002\u0240",
    "\u0241\u0005V,\u0002\u0241\u0242\u0007\u0013\u0002\u0002\u0242\u0244",
    "\u0003\u0002\u0002\u0002\u0243\u0240\u0003\u0002\u0002\u0002\u0244\u0247",
    "\u0003\u0002\u0002\u0002\u0245\u0243\u0003\u0002\u0002\u0002\u0245\u0246",
    "\u0003\u0002\u0002\u0002\u0246\u0248\u0003\u0002\u0002\u0002\u0247\u0245",
    "\u0003\u0002\u0002\u0002\u0248\u0249\u0005\u009eP\u0002\u0249k\u0003",
    "\u0002\u0002\u0002\u024a\u024b\b7\u0001\u0002\u024b\u026a\u0005t;\u0002",
    "\u024c\u026a\u0005P)\u0002\u024d\u026a\u0005X-\u0002\u024e\u024f\u0007",
    ";\u0002\u0002\u024f\u0250\u0005l7\u0002\u0250\u0251\u0007:\u0002\u0002",
    "\u0251\u0252\u0005(\u0015\u0002\u0252\u026a\u0003\u0002\u0002\u0002",
    "\u0253\u0254\u00076\u0002\u0002\u0254\u026a\u0005l7\u000f\u0255\u0256",
    "\u0007<\u0002\u0002\u0256\u026a\u0005l7\u000e\u0257\u0258\u0007@\u0002",
    "\u0002\u0258\u025a\u0007(\u0002\u0002\u0259\u0257\u0003\u0002\u0002",
    "\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002",
    "\u0002\u025b\u025c\u0005r:\u0002\u025c\u025d\u0007>\u0002\u0002\u025d",
    "\u025e\u0005t;\u0002\u025e\u025f\u0007?\u0002\u0002\u025f\u0260\u0005",
    "t;\u0002\u0260\u026a\u0003\u0002\u0002\u0002\u0261\u0262\u0007A\u0002",
    "\u0002\u0262\u0263\u0007(\u0002\u0002\u0263\u0264\u0005r:\u0002\u0264",
    "\u0265\u0007>\u0002\u0002\u0265\u0266\u0005t;\u0002\u0266\u0267\u0007",
    "?\u0002\u0002\u0267\u0268\u0005t;\u0002\u0268\u026a\u0003\u0002\u0002",
    "\u0002\u0269\u024a\u0003\u0002\u0002\u0002\u0269\u024c\u0003\u0002\u0002",
    "\u0002\u0269\u024d\u0003\u0002\u0002\u0002\u0269\u024e\u0003\u0002\u0002",
    "\u0002\u0269\u0253\u0003\u0002\u0002\u0002\u0269\u0255\u0003\u0002\u0002",
    "\u0002\u0269\u0259\u0003\u0002\u0002\u0002\u0269\u0261\u0003\u0002\u0002",
    "\u0002\u026a\u029b\u0003\u0002\u0002\u0002\u026b\u026c\f\n\u0002\u0002",
    "\u026c\u026d\t\u0005\u0002\u0002\u026d\u029a\u0005l7\u000b\u026e\u026f",
    "\f\t\u0002\u0002\u026f\u0270\u0005\u0084C\u0002\u0270\u0271\u0005l7",
    "\n\u0271\u029a\u0003\u0002\u0002\u0002\u0272\u0273\f\b\u0002\u0002\u0273",
    "\u0274\t\u0006\u0002\u0002\u0274\u029a\u0005l7\t\u0275\u0276\f\u0007",
    "\u0002\u0002\u0276\u0278\t\u0007\u0002\u0002\u0277\u0279\u0005x=\u0002",
    "\u0278\u0277\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002",
    "\u0279\u027a\u0003\u0002\u0002\u0002\u027a\u029a\u0005l7\b\u027b\u027c",
    "\f\u0006\u0002\u0002\u027c\u027d\u0007?\u0002\u0002\u027d\u029a\u0005",
    "l7\u0007\u027e\u027f\f\u0005\u0002\u0002\u027f\u0280\t\b\u0002\u0002",
    "\u0280\u029a\u0005l7\u0006\u0281\u0282\f\u0004\u0002\u0002\u0282\u0283",
    "\u0007K\u0002\u0002\u0283\u029a\u0005l7\u0005\u0284\u0285\f\u0003\u0002",
    "\u0002\u0285\u0286\t\t\u0002\u0002\u0286\u029a\u0005l7\u0004\u0287\u0288",
    "\f\u0012\u0002\u0002\u0288\u028a\u00075\u0002\u0002\u0289\u028b\u0007",
    "6\u0002\u0002\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003",
    "\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u029a\t",
    "\n\u0002\u0002\u028d\u028e\f\u0011\u0002\u0002\u028e\u028f\t\u000b\u0002",
    "\u0002\u028f\u029a\u0005(\u0015\u0002\u0290\u0292\f\r\u0002\u0002\u0291",
    "\u0293\u0007=\u0002\u0002\u0292\u0291\u0003\u0002\u0002\u0002\u0292",
    "\u0293\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0007>\u0002\u0002\u0295\u0296\u0005t;\u0002\u0296\u0297\u0007",
    "?\u0002\u0002\u0297\u0298\u0005t;\u0002\u0298\u029a\u0003\u0002\u0002",
    "\u0002\u0299\u026b\u0003\u0002\u0002\u0002\u0299\u026e\u0003\u0002\u0002",
    "\u0002\u0299\u0272\u0003\u0002\u0002\u0002\u0299\u0275\u0003\u0002\u0002",
    "\u0002\u0299\u027b\u0003\u0002\u0002\u0002\u0299\u027e\u0003\u0002\u0002",
    "\u0002\u0299\u0281\u0003\u0002\u0002\u0002\u0299\u0284\u0003\u0002\u0002",
    "\u0002\u0299\u0287\u0003\u0002\u0002\u0002\u0299\u028d\u0003\u0002\u0002",
    "\u0002\u0299\u0290\u0003\u0002\u0002\u0002\u029a\u029d\u0003\u0002\u0002",
    "\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002",
    "\u0002\u029cm\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002\u0002",
    "\u0002\u029e\u029f\t\f\u0002\u0002\u029fo\u0003\u0002\u0002\u0002\u02a0",
    "\u02a5\u0005n8\u0002\u02a1\u02a5\u0007X\u0002\u0002\u02a2\u02a5\u0007",
    "Y\u0002\u0002\u02a3\u02a5\u0007Z\u0002\u0002\u02a4\u02a0\u0003\u0002",
    "\u0002\u0002\u02a4\u02a1\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003\u0002",
    "\u0002\u0002\u02a4\u02a3\u0003\u0002\u0002\u0002\u02a5q\u0003\u0002",
    "\u0002\u0002\u02a6\u02a7\t\r\u0002\u0002\u02a7s\u0003\u0002\u0002\u0002",
    "\u02a8\u02a9\b;\u0001\u0002\u02a9\u02f5\u0005\u0086D\u0002\u02aa\u02ab",
    "\u0007c\u0002\u0002\u02ab\u02ac\u0005l7\u0002\u02ac\u02ad\u0007d\u0002",
    "\u0002\u02ad\u02ae\u0005(\u0015\u0002\u02ae\u02f5\u0003\u0002\u0002",
    "\u0002\u02af\u02b0\t\u000e\u0002\u0002\u02b0\u02f5\u0005t;\u0014\u02b1",
    "\u02b2\t\u000f\u0002\u0002\u02b2\u02b3\u0007i\u0002\u0002\u02b3\u02f5",
    "\u0005t;\u0013\u02b4\u02b5\u0005p9\u0002\u02b5\u02b6\u0007\u0015\u0002",
    "\u0002\u02b6\u02b7\u0005t;\u0012\u02b7\u02f5\u0003\u0002\u0002\u0002",
    "\u02b8\u02b9\u0007@\u0002\u0002\u02b9\u02ba\u0007(\u0002\u0002\u02ba",
    "\u02bb\u0005r:\u0002\u02bb\u02bc\u0007i\u0002\u0002\u02bc\u02bd\u0005",
    "t;\u0011\u02bd\u02f5\u0003\u0002\u0002\u0002\u02be\u02bf\u0007A\u0002",
    "\u0002\u02bf\u02c0\u0007(\u0002\u0002\u02c0\u02c1\u0005r:\u0002\u02c1",
    "\u02c2\u0007i\u0002\u0002\u02c2\u02c3\u0005t;\u0010\u02c3\u02f5\u0003",
    "\u0002\u0002\u0002\u02c4\u02c5\u0007j\u0002\u0002\u02c5\u02c6\u0007",
    "i\u0002\u0002\u02c6\u02f5\u0005t;\u000f\u02c7\u02c8\u0007k\u0002\u0002",
    "\u02c8\u02c9\u0007i\u0002\u0002\u02c9\u02f5\u0005t;\u000e\u02ca\u02cb",
    "\u0007l\u0002\u0002\u02cb\u02cc\u0007i\u0002\u0002\u02cc\u02f5\u0005",
    "t;\r\u02cd\u02ce\u0007m\u0002\u0002\u02ce\u02cf\u0007\u0015\u0002\u0002",
    "\u02cf\u02f5\u0005t;\f\u02d0\u02d1\u0007n\u0002\u0002\u02d1\u02d2\u0007",
    "\u0015\u0002\u0002\u02d2\u02f5\u0005t;\u000b\u02d3\u02d4\t\u0010\u0002",
    "\u0002\u02d4\u02f5\u0005*\u0016\u0002\u02d5\u02d6\u0007w\u0002\u0002",
    "\u02d6\u02d7\u0005l7\u0002\u02d7\u02d8\u0007x\u0002\u0002\u02d8\u02d9",
    "\u0005l7\u0002\u02d9\u02da\u0007y\u0002\u0002\u02da\u02db\u0005l7\u0002",
    "\u02db\u02f5\u0003\u0002\u0002\u0002\u02dc\u02de\u0007z\u0002\u0002",
    "\u02dd\u02df\u0005l7\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02de",
    "\u02df\u0003\u0002\u0002\u0002\u02df\u02e1\u0003\u0002\u0002\u0002\u02e0",
    "\u02e2\u0005v<\u0002\u02e1\u02e0\u0003\u0002\u0002\u0002\u02e2\u02e3",
    "\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e4",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e6",
    "\u0007y\u0002\u0002\u02e6\u02e7\u0005l7\u0002\u02e7\u02e8\u0007h\u0002",
    "\u0002\u02e8\u02f5\u0003\u0002\u0002\u0002\u02e9\u02ea\t\u0011\u0002",
    "\u0002\u02ea\u02f5\u0005l7\u0002\u02eb\u02ec\t\u0012\u0002\u0002\u02ec",
    "\u02f2\u0005l7\u0002\u02ed\u02f0\u0007~\u0002\u0002\u02ee\u02f1\u0005",
    "n8\u0002\u02ef\u02f1\u0005l7\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002",
    "\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f1\u02f3\u0003\u0002\u0002\u0002",
    "\u02f2\u02ed\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002",
    "\u02f3\u02f5\u0003\u0002\u0002\u0002\u02f4\u02a8\u0003\u0002\u0002\u0002",
    "\u02f4\u02aa\u0003\u0002\u0002\u0002\u02f4\u02af\u0003\u0002\u0002\u0002",
    "\u02f4\u02b1\u0003\u0002\u0002\u0002\u02f4\u02b4\u0003\u0002\u0002\u0002",
    "\u02f4\u02b8\u0003\u0002\u0002\u0002\u02f4\u02be\u0003\u0002\u0002\u0002",
    "\u02f4\u02c4\u0003\u0002\u0002\u0002\u02f4\u02c7\u0003\u0002\u0002\u0002",
    "\u02f4\u02ca\u0003\u0002\u0002\u0002\u02f4\u02cd\u0003\u0002\u0002\u0002",
    "\u02f4\u02d0\u0003\u0002\u0002\u0002\u02f4\u02d3\u0003\u0002\u0002\u0002",
    "\u02f4\u02d5\u0003\u0002\u0002\u0002\u02f4\u02dc\u0003\u0002\u0002\u0002",
    "\u02f4\u02e9\u0003\u0002\u0002\u0002\u02f4\u02eb\u0003\u0002\u0002\u0002",
    "\u02f5\u0309\u0003\u0002\u0002\u0002\u02f6\u02f7\f\t\u0002\u0002\u02f7",
    "\u02f8\u0007q\u0002\u0002\u02f8\u0308\u0005t;\n\u02f9\u02fa\f\b\u0002",
    "\u0002\u02fa\u02fb\t\u0013\u0002\u0002\u02fb\u0308\u0005t;\t\u02fc\u02fd",
    "\f\u0007\u0002\u0002\u02fd\u02fe\t\u0014\u0002\u0002\u02fe\u0308\u0005",
    "t;\b\u02ff\u0300\f\u0017\u0002\u0002\u0300\u0301\u0007\u0013\u0002\u0002",
    "\u0301\u0308\u0005\u00a2R\u0002\u0302\u0303\f\u0016\u0002\u0002\u0303",
    "\u0304\u0007\'\u0002\u0002\u0304\u0305\u0005l7\u0002\u0305\u0306\u0007",
    ")\u0002\u0002\u0306\u0308\u0003\u0002\u0002\u0002\u0307\u02f6\u0003",
    "\u0002\u0002\u0002\u0307\u02f9\u0003\u0002\u0002\u0002\u0307\u02fc\u0003",
    "\u0002\u0002\u0002\u0307\u02ff\u0003\u0002\u0002\u0002\u0307\u0302\u0003",
    "\u0002\u0002\u0002\u0308\u030b\u0003\u0002\u0002\u0002\u0309\u0307\u0003",
    "\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030au\u0003",
    "\u0002\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030c\u030d\u0007",
    "\u007f\u0002\u0002\u030d\u030e\u0005l7\u0002\u030e\u030f\u0007x\u0002",
    "\u0002\u030f\u0310\u0005l7\u0002\u0310w\u0003\u0002\u0002\u0002\u0311",
    "\u0312\u0005n8\u0002\u0312\u0313\u0007i\u0002\u0002\u0313y\u0003\u0002",
    "\u0002\u0002\u0314\u0315\t\u0015\u0002\u0002\u0315{\u0003\u0002\u0002",
    "\u0002\u0316\u0317\t\u0016\u0002\u0002\u0317}\u0003\u0002\u0002\u0002",
    "\u0318\u0319\t\u0017\u0002\u0002\u0319\u007f\u0003\u0002\u0002\u0002",
    "\u031a\u031c\u0005\u00a8U\u0002\u031b\u031d\u0005|?\u0002\u031c\u031b",
    "\u0003\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002\u0002\u031d\u0322",
    "\u0003\u0002\u0002\u0002\u031e\u031f\u0005~@\u0002\u031f\u0320\u0005",
    "\u00a8U\u0002\u0320\u0322\u0003\u0002\u0002\u0002\u0321\u031a\u0003",
    "\u0002\u0002\u0002\u0321\u031e\u0003\u0002\u0002\u0002\u0322\u0081\u0003",
    "\u0002\u0002\u0002\u0323\u0325\u0007\u0086\u0002\u0002\u0324\u0323\u0003",
    "\u0002\u0002\u0002\u0324\u0325\u0003\u0002\u0002\u0002\u0325\u0326\u0003",
    "\u0002\u0002\u0002\u0326\u032c\t\u0018\u0002\u0002\u0327\u0329\t\u0018",
    "\u0002\u0002\u0328\u032a\u0007\u0089\u0002\u0002\u0329\u0328\u0003\u0002",
    "\u0002\u0002\u0329\u032a\u0003\u0002\u0002\u0002\u032a\u032c\u0003\u0002",
    "\u0002\u0002\u032b\u0324\u0003\u0002\u0002\u0002\u032b\u0327\u0003\u0002",
    "\u0002\u0002\u032c\u0083\u0003\u0002\u0002\u0002\u032d\u032f\t\u0019",
    "\u0002\u0002\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002",
    "\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u0332\u0007\u008d",
    "\u0002\u0002\u0331\u0333\u0005n8\u0002\u0332\u0331\u0003\u0002\u0002",
    "\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0336\u0003\u0002\u0002",
    "\u0002\u0334\u0337\u0005z>\u0002\u0335\u0337\u0007:\u0002\u0002\u0336",
    "\u0334\u0003\u0002\u0002\u0002\u0336\u0335\u0003\u0002\u0002\u0002\u0337",
    "\u0339\u0003\u0002\u0002\u0002\u0338\u033a\t\u000f\u0002\u0002\u0339",
    "\u0338\u0003\u0002\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002\u033a",
    "\u037f\u0003\u0002\u0002\u0002\u033b\u033d\u0007=\u0002\u0002\u033c",
    "\u033b\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d",
    "\u033e\u0003\u0002\u0002\u0002\u033e\u0340\u0007\u008e\u0002\u0002\u033f",
    "\u0341\u0005x=\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0340\u0341",
    "\u0003\u0002\u0002\u0002\u0341\u0343\u0003\u0002\u0002\u0002\u0342\u0344",
    "\t\u000f\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0343\u0344",
    "\u0003\u0002\u0002\u0002\u0344\u037f\u0003\u0002\u0002\u0002\u0345\u0347",
    "\t\u0019\u0002\u0002\u0346\u0345\u0003\u0002\u0002\u0002\u0346\u0347",
    "\u0003\u0002\u0002\u0002\u0347\u0349\u0003\u0002\u0002\u0002\u0348\u034a",
    "\u0007=\u0002\u0002\u0349\u0348\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0003\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034d",
    "\t\u001a\u0002\u0002\u034c\u034e\u0005x=\u0002\u034d\u034c\u0003\u0002",
    "\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u037f\u0003\u0002",
    "\u0002\u0002\u034f\u0351\t\u0019\u0002\u0002\u0350\u034f\u0003\u0002",
    "\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351\u0353\u0003\u0002",
    "\u0002\u0002\u0352\u0354\u0005\u0080A\u0002\u0353\u0352\u0003\u0002",
    "\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002",
    "\u0002\u0002\u0355\u0357\u0005\u0082B\u0002\u0356\u0358\u0005x=\u0002",
    "\u0357\u0356\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002",
    "\u0358\u035a\u0003\u0002\u0002\u0002\u0359\u035b\t\u000f\u0002\u0002",
    "\u035a\u0359\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002",
    "\u035b\u037f\u0003\u0002\u0002\u0002\u035c\u035e\t\u0019\u0002\u0002",
    "\u035d\u035c\u0003\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002",
    "\u035e\u0360\u0003\u0002\u0002\u0002\u035f\u0361\u0007=\u0002\u0002",
    "\u0360\u035f\u0003\u0002\u0002\u0002\u0360\u0361\u0003\u0002\u0002\u0002",
    "\u0361\u0362\u0003\u0002\u0002\u0002\u0362\u0363\u0007\u0091\u0002\u0002",
    "\u0363\u0364\u0005\u00a8U\u0002\u0364\u0366\u0007i\u0002\u0002\u0365",
    "\u0367\t\u000f\u0002\u0002\u0366\u0365\u0003\u0002\u0002\u0002\u0366",
    "\u0367\u0003\u0002\u0002\u0002\u0367\u037f\u0003\u0002\u0002\u0002\u0368",
    "\u036a\u0007\u0092\u0002\u0002\u0369\u036b\t\u0018\u0002\u0002\u036a",
    "\u0369\u0003\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b",
    "\u036d\u0003\u0002\u0002\u0002\u036c\u036e\u0005x=\u0002\u036d\u036c",
    "\u0003\u0002\u0002\u0002\u036d\u036e\u0003\u0002\u0002\u0002\u036e\u037f",
    "\u0003\u0002\u0002\u0002\u036f\u0371\u0007\u0093\u0002\u0002\u0370\u0372",
    "\t\u0018\u0002\u0002\u0371\u0370\u0003\u0002\u0002\u0002\u0371\u0372",
    "\u0003\u0002\u0002\u0002\u0372\u0374\u0003\u0002\u0002\u0002\u0373\u0375",
    "\u0005x=\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0374\u0375\u0003",
    "\u0002\u0002\u0002\u0375\u037f\u0003\u0002\u0002\u0002\u0376\u0378\u0007",
    "\u008a\u0002\u0002\u0377\u0379\u0005x=\u0002\u0378\u0377\u0003\u0002",
    "\u0002\u0002\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u037f\u0003\u0002",
    "\u0002\u0002\u037a\u037c\u0007\u008b\u0002\u0002\u037b\u037d\u0005x",
    "=\u0002\u037c\u037b\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002",
    "\u0002\u0002\u037d\u037f\u0003\u0002\u0002\u0002\u037e\u032e\u0003\u0002",
    "\u0002\u0002\u037e\u033c\u0003\u0002\u0002\u0002\u037e\u0346\u0003\u0002",
    "\u0002\u0002\u037e\u0350\u0003\u0002\u0002\u0002\u037e\u035d\u0003\u0002",
    "\u0002\u0002\u037e\u0368\u0003\u0002\u0002\u0002\u037e\u036f\u0003\u0002",
    "\u0002\u0002\u037e\u0376\u0003\u0002\u0002\u0002\u037e\u037a\u0003\u0002",
    "\u0002\u0002\u037f\u0085\u0003\u0002\u0002\u0002\u0380\u038e\u0005\u00a2",
    "R\u0002\u0381\u038e\u0005\u008aF\u0002\u0382\u038e\u0005\u00a0Q\u0002",
    "\u0383\u038e\u0005\u008cG\u0002\u0384\u038e\u0005\u008eH\u0002\u0385",
    "\u038e\u0005\u0092J\u0002\u0386\u038e\u0005\u0096L\u0002\u0387\u038e",
    "\u0005\u009aN\u0002\u0388\u038e\u0005\u009cO\u0002\u0389\u038a\u0007",
    " \u0002\u0002\u038a\u038b\u0005l7\u0002\u038b\u038c\u0007!\u0002\u0002",
    "\u038c\u038e\u0003\u0002\u0002\u0002\u038d\u0380\u0003\u0002\u0002\u0002",
    "\u038d\u0381\u0003\u0002\u0002\u0002\u038d\u0382\u0003\u0002\u0002\u0002",
    "\u038d\u0383\u0003\u0002\u0002\u0002\u038d\u0384\u0003\u0002\u0002\u0002",
    "\u038d\u0385\u0003\u0002\u0002\u0002\u038d\u0386\u0003\u0002\u0002\u0002",
    "\u038d\u0387\u0003\u0002\u0002\u0002\u038d\u0388\u0003\u0002\u0002\u0002",
    "\u038d\u0389\u0003\u0002\u0002\u0002\u038e\u0087\u0003\u0002\u0002\u0002",
    "\u038f\u0390\u0005\u00a8U\u0002\u0390\u0391\u0007\r\u0002\u0002\u0391",
    "\u0392\u0005\u00a8U\u0002\u0392\u0089\u0003\u0002\u0002\u0002\u0393",
    "\u039c\t\u001b\u0002\u0002\u0394\u039c\u00077\u0002\u0002\u0395\u039c",
    "\u0007\u00a0\u0002\u0002\u0396\u039c\u0007\u00a1\u0002\u0002\u0397\u039c",
    "\u0007\u009c\u0002\u0002\u0398\u039c\u0007\u009d\u0002\u0002\u0399\u039c",
    "\u0005\u00a8U\u0002\u039a\u039c\u0005\u0088E\u0002\u039b\u0393\u0003",
    "\u0002\u0002\u0002\u039b\u0394\u0003\u0002\u0002\u0002\u039b\u0395\u0003",
    "\u0002\u0002\u0002\u039b\u0396\u0003\u0002\u0002\u0002\u039b\u0397\u0003",
    "\u0002\u0002\u0002\u039b\u0398\u0003\u0002\u0002\u0002\u039b\u0399\u0003",
    "\u0002\u0002\u0002\u039b\u039a\u0003\u0002\u0002\u0002\u039c\u008b\u0003",
    "\u0002\u0002\u0002\u039d\u039e\u0007\u001a\u0002\u0002\u039e\u039f\t",
    "\u001c\u0002\u0002\u039f\u03a0\u0005l7\u0002\u03a0\u03a1\u0007\u0011",
    "\u0002\u0002\u03a1\u03a2\u0005l7\u0002\u03a2\u03a3\t\u001d\u0002\u0002",
    "\u03a3\u008d\u0003\u0002\u0002\u0002\u03a4\u03a6\u0007\u001b\u0002\u0002",
    "\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002",
    "\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03b1\u0007\u0010\u0002\u0002",
    "\u03a8\u03b2\u0007\r\u0002\u0002\u03a9\u03ae\u0005\u0090I\u0002\u03aa",
    "\u03ab\u0007\u0011\u0002\u0002\u03ab\u03ad\u0005\u0090I\u0002\u03ac",
    "\u03aa\u0003\u0002\u0002\u0002\u03ad\u03b0\u0003\u0002\u0002\u0002\u03ae",
    "\u03ac\u0003\u0002\u0002\u0002\u03ae\u03af\u0003\u0002\u0002\u0002\u03af",
    "\u03b2\u0003\u0002\u0002\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1",
    "\u03a8\u0003\u0002\u0002\u0002\u03b1\u03a9\u0003\u0002\u0002\u0002\u03b2",
    "\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b4\u0007\u0012\u0002\u0002\u03b4",
    "\u008f\u0003\u0002\u0002\u0002\u03b5\u03b6\u0005\u009eP\u0002\u03b6",
    "\u03b7\u0007\r\u0002\u0002\u03b7\u03b8\u0005l7\u0002\u03b8\u0091\u0003",
    "\u0002\u0002\u0002\u03b9\u03ba\u0005*\u0016\u0002\u03ba\u03c4\u0007",
    "\u0010\u0002\u0002\u03bb\u03c5\u0007\r\u0002\u0002\u03bc\u03c1\u0005",
    "\u0094K\u0002\u03bd\u03be\u0007\u0011\u0002\u0002\u03be\u03c0\u0005",
    "\u0094K\u0002\u03bf\u03bd\u0003\u0002\u0002\u0002\u03c0\u03c3\u0003",
    "\u0002\u0002\u0002\u03c1\u03bf\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003",
    "\u0002\u0002\u0002\u03c2\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003",
    "\u0002\u0002\u0002\u03c4\u03bb\u0003\u0002\u0002\u0002\u03c4\u03bc\u0003",
    "\u0002\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0007",
    "\u0012\u0002\u0002\u03c7\u0093\u0003\u0002\u0002\u0002\u03c8\u03c9\u0005",
    "\u009eP\u0002\u03c9\u03ca\u0007\r\u0002\u0002\u03ca\u03cb\u0005l7\u0002",
    "\u03cb\u0095\u0003\u0002\u0002\u0002\u03cc\u03d1\u0007\u0017\u0002\u0002",
    "\u03cd\u03ce\u0007\u0018\u0002\u0002\u03ce\u03cf\u0005(\u0015\u0002",
    "\u03cf\u03d0\u0007\u0019\u0002\u0002\u03d0\u03d2\u0003\u0002\u0002\u0002",
    "\u03d1\u03cd\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002\u0002\u0002",
    "\u03d2\u03d4\u0003\u0002\u0002\u0002\u03d3\u03cc\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002",
    "\u03d5\u03de\u0007\u0010\u0002\u0002\u03d6\u03db\u0005l7\u0002\u03d7",
    "\u03d8\u0007\u0011\u0002\u0002\u03d8\u03da\u0005l7\u0002\u03d9\u03d7",
    "\u0003\u0002\u0002\u0002\u03da\u03dd\u0003\u0002\u0002\u0002\u03db\u03d9",
    "\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03df",
    "\u0003\u0002\u0002\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03de\u03d6",
    "\u0003\u0002\u0002\u0002\u03de\u03df\u0003\u0002\u0002\u0002\u03df\u03e0",
    "\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007\u0012\u0002\u0002\u03e1\u0097",
    "\u0003\u0002\u0002\u0002\u03e2\u03e3\u0007\u0094\u0002\u0002\u03e3\u03e4",
    "\u0007\u00a0\u0002\u0002\u03e4\u0099\u0003\u0002\u0002\u0002\u03e5\u03e6",
    "\u0007\u0095\u0002\u0002\u03e6\u03e7\u0007\u00a0\u0002\u0002\u03e7\u03e8",
    "\u0007\u0015\u0002\u0002\u03e8\u03ea\u0005\u0016\f\u0002\u03e9\u03eb",
    "\u0005\u0098M\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002\u03ea\u03eb",
    "\u0003\u0002\u0002\u0002\u03eb\u009b\u0003\u0002\u0002\u0002\u03ec\u03ed",
    "\u0007\u0096\u0002\u0002\u03ed\u03ee\u0007\u0010\u0002\u0002\u03ee\u03f3",
    "\u0005\u009aN\u0002\u03ef\u03f0\u0007\u0011\u0002\u0002\u03f0\u03f2",
    "\u0005\u009aN\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f2\u03f5",
    "\u0003\u0002\u0002\u0002\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f3\u03f4",
    "\u0003\u0002\u0002\u0002\u03f4\u03f6\u0003\u0002\u0002\u0002\u03f5\u03f3",
    "\u0003\u0002\u0002\u0002\u03f6\u03f8\u0007\u0012\u0002\u0002\u03f7\u03f9",
    "\u0005\u0098M\u0002\u03f8\u03f7\u0003\u0002\u0002\u0002\u03f8\u03f9",
    "\u0003\u0002\u0002\u0002\u03f9\u009d\u0003\u0002\u0002\u0002\u03fa\u03fb",
    "\t\u001e\u0002\u0002\u03fb\u009f\u0003\u0002\u0002\u0002\u03fc\u03fd",
    "\u0007\u0097\u0002\u0002\u03fd\u03fe\u0005\u009eP\u0002\u03fe\u00a1",
    "\u0003\u0002\u0002\u0002\u03ff\u0405\u0005\u009eP\u0002\u0400\u0405",
    "\u0005\u00a4S\u0002\u0401\u0405\u0007\u0098\u0002\u0002\u0402\u0405",
    "\u0007\u0099\u0002\u0002\u0403\u0405\u0007\u009a\u0002\u0002\u0404\u03ff",
    "\u0003\u0002\u0002\u0002\u0404\u0400\u0003\u0002\u0002\u0002\u0404\u0401",
    "\u0003\u0002\u0002\u0002\u0404\u0402\u0003\u0002\u0002\u0002\u0404\u0403",
    "\u0003\u0002\u0002\u0002\u0405\u00a3\u0003\u0002\u0002\u0002\u0406\u0407",
    "\u0005\u009eP\u0002\u0407\u0409\u0007 \u0002\u0002\u0408\u040a\u0005",
    "\u00a6T\u0002\u0409\u0408\u0003\u0002\u0002\u0002\u0409\u040a\u0003",
    "\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040c\u0007",
    "!\u0002\u0002\u040c\u00a5\u0003\u0002\u0002\u0002\u040d\u0412\u0005",
    "l7\u0002\u040e\u040f\u0007\u0011\u0002\u0002\u040f\u0411\u0005l7\u0002",
    "\u0410\u040e\u0003\u0002\u0002\u0002\u0411\u0414\u0003\u0002\u0002\u0002",
    "\u0412\u0410\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002",
    "\u0413\u00a7\u0003\u0002\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002",
    "\u0415\u0417\u0007\u00a1\u0002\u0002\u0416\u0418\u0005\u00aaV\u0002",
    "\u0417\u0416\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002\u0002\u0002",
    "\u0418\u00a9\u0003\u0002\u0002\u0002\u0419\u041d\u0005n8\u0002\u041a",
    "\u041d\u0005r:\u0002\u041b\u041d\u0007\u00a0\u0002\u0002\u041c\u0419",
    "\u0003\u0002\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c\u041b",
    "\u0003\u0002\u0002\u0002\u041d\u00ab\u0003\u0002\u0002\u0002{\u00ad",
    "\u00b2\u00b8\u00be\u00c4\u00ca\u00d0\u00d6\u00dc\u00e3\u00e9\u00ef\u00f3",
    "\u00fa\u00ff\u0103\u0106\u010e\u0111\u0119\u011c\u0125\u012d\u0134\u013d",
    "\u0140\u014b\u0150\u0155\u0166\u016d\u0185\u0194\u019c\u01a0\u01ab\u01b5",
    "\u01b8\u01bd\u01c2\u01cf\u01d8\u01ea\u01ed\u01f5\u01fb\u0200\u0204\u0207",
    "\u020a\u020d\u0214\u021d\u0229\u0235\u0238\u023e\u0245\u0259\u0269\u0278",
    "\u028a\u0292\u0299\u029b\u02a4\u02de\u02e3\u02f0\u02f2\u02f4\u0307\u0309",
    "\u031c\u0321\u0324\u0329\u032b\u032e\u0332\u0336\u0339\u033c\u0340\u0343",
    "\u0346\u0349\u034d\u0350\u0353\u0357\u035a\u035d\u0360\u0366\u036a\u036d",
    "\u0371\u0374\u0378\u037c\u037e\u038d\u039b\u03a5\u03ae\u03b1\u03c1\u03c4",
    "\u03d1\u03d3\u03db\u03de\u03ea\u03f3\u03f8\u0404\u0409\u0412\u0417\u041c"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'library'", "'version'", "'using'", "'include'", 
                     "'called'", "'public'", "'private'", "'parameter'", 
                     "'default'", "'codesystem'", "':'", "'valueset'", "'codesystems'", 
                     "'{'", "','", "'}'", "'.'", "'code'", "'from'", "'concept'", 
                     "'List'", "'<'", "'>'", "'Interval'", "'Tuple'", "'Choice'", 
                     "'define'", "'context'", "'function'", "'('", "')'", 
                     "'returns'", "'external'", "'with'", "'such that'", 
                     "'without'", "'['", "'in'", "']'", "'let'", "'where'", 
                     "'return'", "'all'", "'distinct'", "'sort'", "'by'", 
                     "'asc'", "'ascending'", "'desc'", "'descending'", "'is'", 
                     "'not'", "'null'", "'true'", "'false'", "'as'", "'cast'", 
                     "'exists'", "'properly'", "'between'", "'and'", "'duration'", 
                     "'difference'", "'<='", "'>='", "'='", "'!='", "'~'", 
                     "'!~'", "'contains'", "'or'", "'xor'", "'implies'", 
                     "'|'", "'union'", "'intersect'", "'except'", "'year'", 
                     "'month'", "'week'", "'day'", "'hour'", "'minute'", 
                     "'second'", "'millisecond'", "'date'", "'time'", "'timezone'", 
                     "'years'", "'months'", "'weeks'", "'days'", "'hours'", 
                     "'minutes'", "'seconds'", "'milliseconds'", "'convert'", 
                     "'to'", "'+'", "'-'", "'start'", "'end'", "'of'", "'width'", 
                     "'successor'", "'predecessor'", "'singleton'", "'point'", 
                     "'minimum'", "'maximum'", "'^'", "'*'", "'/'", "'div'", 
                     "'mod'", "'&'", "'if'", "'then'", "'else'", "'case'", 
                     "'flatten'", "'expand'", "'collapse'", "'per'", "'when'", 
                     "'or before'", "'or after'", "'or more'", "'or less'", 
                     "'less than'", "'more than'", "'on or'", "'before'", 
                     "'after'", "'or on'", "'starts'", "'ends'", "'occurs'", 
                     "'same'", "'includes'", "'during'", "'included in'", 
                     "'within'", "'meets'", "'overlaps'", "'display'", "'Code'", 
                     "'Concept'", "'%'", "'$this'", "'$index'", "'$total'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      "QUOTEDIDENTIFIER", "DATETIME", "TIME", "IDENTIFIER", 
                      "DELIMITEDIDENTIFIER", "STRING", "NUMBER", "WS", "COMMENT", 
                      "LINE_COMMENT" ];

var ruleNames =  [ "library", "libraryDefinition", "usingDefinition", "includeDefinition", 
                   "localIdentifier", "accessModifier", "parameterDefinition", 
                   "codesystemDefinition", "valuesetDefinition", "codesystems", 
                   "codesystemIdentifier", "libraryIdentifier", "codeDefinition", 
                   "conceptDefinition", "codeIdentifier", "codesystemId", 
                   "valuesetId", "versionSpecifier", "codeId", "typeSpecifier", 
                   "namedTypeSpecifier", "modelIdentifier", "listTypeSpecifier", 
                   "intervalTypeSpecifier", "tupleTypeSpecifier", "tupleElementDefinition", 
                   "choiceTypeSpecifier", "statement", "expressionDefinition", 
                   "contextDefinition", "functionDefinition", "operandDefinition", 
                   "functionBody", "querySource", "aliasedQuerySource", 
                   "alias", "queryInclusionClause", "withClause", "withoutClause", 
                   "retrieve", "codePath", "terminology", "qualifier", "query", 
                   "sourceClause", "letClause", "letClauseItem", "whereClause", 
                   "returnClause", "sortClause", "sortDirection", "sortByItem", 
                   "qualifiedIdentifier", "expression", "dateTimePrecision", 
                   "dateTimeComponent", "pluralDateTimePrecision", "expressionTerm", 
                   "caseExpressionItem", "dateTimePrecisionSpecifier", "relativeQualifier", 
                   "offsetRelativeQualifier", "exclusiveRelativeQualifier", 
                   "quantityOffset", "temporalRelationship", "intervalOperatorPhrase", 
                   "term", "ratio", "literal", "intervalSelector", "tupleSelector", 
                   "tupleElementSelector", "instanceSelector", "instanceElementSelector", 
                   "listSelector", "displayClause", "codeSelector", "conceptSelector", 
                   "identifier", "externalConstant", "invocation", "func", 
                   "paramList", "quantity", "unit" ];

function cqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

cqlParser.prototype = Object.create(antlr4.Parser.prototype);
cqlParser.prototype.constructor = cqlParser;

Object.defineProperty(cqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

cqlParser.EOF = antlr4.Token.EOF;
cqlParser.T__0 = 1;
cqlParser.T__1 = 2;
cqlParser.T__2 = 3;
cqlParser.T__3 = 4;
cqlParser.T__4 = 5;
cqlParser.T__5 = 6;
cqlParser.T__6 = 7;
cqlParser.T__7 = 8;
cqlParser.T__8 = 9;
cqlParser.T__9 = 10;
cqlParser.T__10 = 11;
cqlParser.T__11 = 12;
cqlParser.T__12 = 13;
cqlParser.T__13 = 14;
cqlParser.T__14 = 15;
cqlParser.T__15 = 16;
cqlParser.T__16 = 17;
cqlParser.T__17 = 18;
cqlParser.T__18 = 19;
cqlParser.T__19 = 20;
cqlParser.T__20 = 21;
cqlParser.T__21 = 22;
cqlParser.T__22 = 23;
cqlParser.T__23 = 24;
cqlParser.T__24 = 25;
cqlParser.T__25 = 26;
cqlParser.T__26 = 27;
cqlParser.T__27 = 28;
cqlParser.T__28 = 29;
cqlParser.T__29 = 30;
cqlParser.T__30 = 31;
cqlParser.T__31 = 32;
cqlParser.T__32 = 33;
cqlParser.T__33 = 34;
cqlParser.T__34 = 35;
cqlParser.T__35 = 36;
cqlParser.T__36 = 37;
cqlParser.T__37 = 38;
cqlParser.T__38 = 39;
cqlParser.T__39 = 40;
cqlParser.T__40 = 41;
cqlParser.T__41 = 42;
cqlParser.T__42 = 43;
cqlParser.T__43 = 44;
cqlParser.T__44 = 45;
cqlParser.T__45 = 46;
cqlParser.T__46 = 47;
cqlParser.T__47 = 48;
cqlParser.T__48 = 49;
cqlParser.T__49 = 50;
cqlParser.T__50 = 51;
cqlParser.T__51 = 52;
cqlParser.T__52 = 53;
cqlParser.T__53 = 54;
cqlParser.T__54 = 55;
cqlParser.T__55 = 56;
cqlParser.T__56 = 57;
cqlParser.T__57 = 58;
cqlParser.T__58 = 59;
cqlParser.T__59 = 60;
cqlParser.T__60 = 61;
cqlParser.T__61 = 62;
cqlParser.T__62 = 63;
cqlParser.T__63 = 64;
cqlParser.T__64 = 65;
cqlParser.T__65 = 66;
cqlParser.T__66 = 67;
cqlParser.T__67 = 68;
cqlParser.T__68 = 69;
cqlParser.T__69 = 70;
cqlParser.T__70 = 71;
cqlParser.T__71 = 72;
cqlParser.T__72 = 73;
cqlParser.T__73 = 74;
cqlParser.T__74 = 75;
cqlParser.T__75 = 76;
cqlParser.T__76 = 77;
cqlParser.T__77 = 78;
cqlParser.T__78 = 79;
cqlParser.T__79 = 80;
cqlParser.T__80 = 81;
cqlParser.T__81 = 82;
cqlParser.T__82 = 83;
cqlParser.T__83 = 84;
cqlParser.T__84 = 85;
cqlParser.T__85 = 86;
cqlParser.T__86 = 87;
cqlParser.T__87 = 88;
cqlParser.T__88 = 89;
cqlParser.T__89 = 90;
cqlParser.T__90 = 91;
cqlParser.T__91 = 92;
cqlParser.T__92 = 93;
cqlParser.T__93 = 94;
cqlParser.T__94 = 95;
cqlParser.T__95 = 96;
cqlParser.T__96 = 97;
cqlParser.T__97 = 98;
cqlParser.T__98 = 99;
cqlParser.T__99 = 100;
cqlParser.T__100 = 101;
cqlParser.T__101 = 102;
cqlParser.T__102 = 103;
cqlParser.T__103 = 104;
cqlParser.T__104 = 105;
cqlParser.T__105 = 106;
cqlParser.T__106 = 107;
cqlParser.T__107 = 108;
cqlParser.T__108 = 109;
cqlParser.T__109 = 110;
cqlParser.T__110 = 111;
cqlParser.T__111 = 112;
cqlParser.T__112 = 113;
cqlParser.T__113 = 114;
cqlParser.T__114 = 115;
cqlParser.T__115 = 116;
cqlParser.T__116 = 117;
cqlParser.T__117 = 118;
cqlParser.T__118 = 119;
cqlParser.T__119 = 120;
cqlParser.T__120 = 121;
cqlParser.T__121 = 122;
cqlParser.T__122 = 123;
cqlParser.T__123 = 124;
cqlParser.T__124 = 125;
cqlParser.T__125 = 126;
cqlParser.T__126 = 127;
cqlParser.T__127 = 128;
cqlParser.T__128 = 129;
cqlParser.T__129 = 130;
cqlParser.T__130 = 131;
cqlParser.T__131 = 132;
cqlParser.T__132 = 133;
cqlParser.T__133 = 134;
cqlParser.T__134 = 135;
cqlParser.T__135 = 136;
cqlParser.T__136 = 137;
cqlParser.T__137 = 138;
cqlParser.T__138 = 139;
cqlParser.T__139 = 140;
cqlParser.T__140 = 141;
cqlParser.T__141 = 142;
cqlParser.T__142 = 143;
cqlParser.T__143 = 144;
cqlParser.T__144 = 145;
cqlParser.T__145 = 146;
cqlParser.T__146 = 147;
cqlParser.T__147 = 148;
cqlParser.T__148 = 149;
cqlParser.T__149 = 150;
cqlParser.T__150 = 151;
cqlParser.T__151 = 152;
cqlParser.QUOTEDIDENTIFIER = 153;
cqlParser.DATETIME = 154;
cqlParser.TIME = 155;
cqlParser.IDENTIFIER = 156;
cqlParser.DELIMITEDIDENTIFIER = 157;
cqlParser.STRING = 158;
cqlParser.NUMBER = 159;
cqlParser.WS = 160;
cqlParser.COMMENT = 161;
cqlParser.LINE_COMMENT = 162;

cqlParser.RULE_library = 0;
cqlParser.RULE_libraryDefinition = 1;
cqlParser.RULE_usingDefinition = 2;
cqlParser.RULE_includeDefinition = 3;
cqlParser.RULE_localIdentifier = 4;
cqlParser.RULE_accessModifier = 5;
cqlParser.RULE_parameterDefinition = 6;
cqlParser.RULE_codesystemDefinition = 7;
cqlParser.RULE_valuesetDefinition = 8;
cqlParser.RULE_codesystems = 9;
cqlParser.RULE_codesystemIdentifier = 10;
cqlParser.RULE_libraryIdentifier = 11;
cqlParser.RULE_codeDefinition = 12;
cqlParser.RULE_conceptDefinition = 13;
cqlParser.RULE_codeIdentifier = 14;
cqlParser.RULE_codesystemId = 15;
cqlParser.RULE_valuesetId = 16;
cqlParser.RULE_versionSpecifier = 17;
cqlParser.RULE_codeId = 18;
cqlParser.RULE_typeSpecifier = 19;
cqlParser.RULE_namedTypeSpecifier = 20;
cqlParser.RULE_modelIdentifier = 21;
cqlParser.RULE_listTypeSpecifier = 22;
cqlParser.RULE_intervalTypeSpecifier = 23;
cqlParser.RULE_tupleTypeSpecifier = 24;
cqlParser.RULE_tupleElementDefinition = 25;
cqlParser.RULE_choiceTypeSpecifier = 26;
cqlParser.RULE_statement = 27;
cqlParser.RULE_expressionDefinition = 28;
cqlParser.RULE_contextDefinition = 29;
cqlParser.RULE_functionDefinition = 30;
cqlParser.RULE_operandDefinition = 31;
cqlParser.RULE_functionBody = 32;
cqlParser.RULE_querySource = 33;
cqlParser.RULE_aliasedQuerySource = 34;
cqlParser.RULE_alias = 35;
cqlParser.RULE_queryInclusionClause = 36;
cqlParser.RULE_withClause = 37;
cqlParser.RULE_withoutClause = 38;
cqlParser.RULE_retrieve = 39;
cqlParser.RULE_codePath = 40;
cqlParser.RULE_terminology = 41;
cqlParser.RULE_qualifier = 42;
cqlParser.RULE_query = 43;
cqlParser.RULE_sourceClause = 44;
cqlParser.RULE_letClause = 45;
cqlParser.RULE_letClauseItem = 46;
cqlParser.RULE_whereClause = 47;
cqlParser.RULE_returnClause = 48;
cqlParser.RULE_sortClause = 49;
cqlParser.RULE_sortDirection = 50;
cqlParser.RULE_sortByItem = 51;
cqlParser.RULE_qualifiedIdentifier = 52;
cqlParser.RULE_expression = 53;
cqlParser.RULE_dateTimePrecision = 54;
cqlParser.RULE_dateTimeComponent = 55;
cqlParser.RULE_pluralDateTimePrecision = 56;
cqlParser.RULE_expressionTerm = 57;
cqlParser.RULE_caseExpressionItem = 58;
cqlParser.RULE_dateTimePrecisionSpecifier = 59;
cqlParser.RULE_relativeQualifier = 60;
cqlParser.RULE_offsetRelativeQualifier = 61;
cqlParser.RULE_exclusiveRelativeQualifier = 62;
cqlParser.RULE_quantityOffset = 63;
cqlParser.RULE_temporalRelationship = 64;
cqlParser.RULE_intervalOperatorPhrase = 65;
cqlParser.RULE_term = 66;
cqlParser.RULE_ratio = 67;
cqlParser.RULE_literal = 68;
cqlParser.RULE_intervalSelector = 69;
cqlParser.RULE_tupleSelector = 70;
cqlParser.RULE_tupleElementSelector = 71;
cqlParser.RULE_instanceSelector = 72;
cqlParser.RULE_instanceElementSelector = 73;
cqlParser.RULE_listSelector = 74;
cqlParser.RULE_displayClause = 75;
cqlParser.RULE_codeSelector = 76;
cqlParser.RULE_conceptSelector = 77;
cqlParser.RULE_identifier = 78;
cqlParser.RULE_externalConstant = 79;
cqlParser.RULE_invocation = 80;
cqlParser.RULE_func = 81;
cqlParser.RULE_paramList = 82;
cqlParser.RULE_quantity = 83;
cqlParser.RULE_unit = 84;


function LibraryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_library;
    return this;
}

LibraryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LibraryContext.prototype.constructor = LibraryContext;

LibraryContext.prototype.libraryDefinition = function() {
    return this.getTypedRuleContext(LibraryDefinitionContext,0);
};

LibraryContext.prototype.usingDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingDefinitionContext);
    } else {
        return this.getTypedRuleContext(UsingDefinitionContext,i);
    }
};

LibraryContext.prototype.includeDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeDefinitionContext);
    } else {
        return this.getTypedRuleContext(IncludeDefinitionContext,i);
    }
};

LibraryContext.prototype.codesystemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodesystemDefinitionContext);
    } else {
        return this.getTypedRuleContext(CodesystemDefinitionContext,i);
    }
};

LibraryContext.prototype.valuesetDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValuesetDefinitionContext);
    } else {
        return this.getTypedRuleContext(ValuesetDefinitionContext,i);
    }
};

LibraryContext.prototype.codeDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodeDefinitionContext);
    } else {
        return this.getTypedRuleContext(CodeDefinitionContext,i);
    }
};

LibraryContext.prototype.conceptDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConceptDefinitionContext);
    } else {
        return this.getTypedRuleContext(ConceptDefinitionContext,i);
    }
};

LibraryContext.prototype.parameterDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDefinitionContext);
    } else {
        return this.getTypedRuleContext(ParameterDefinitionContext,i);
    }
};

LibraryContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

LibraryContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLibrary(this);
	}
};

LibraryContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLibrary(this);
	}
};

LibraryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLibrary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.LibraryContext = LibraryContext;

cqlParser.prototype.library = function() {

    var localctx = new LibraryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, cqlParser.RULE_library);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 171;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__0) {
            this.state = 170;
            this.libraryDefinition();
        }

        this.state = 176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__2) {
            this.state = 173;
            this.usingDefinition();
            this.state = 178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__3) {
            this.state = 179;
            this.includeDefinition();
            this.state = 184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 188;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 185;
                this.codesystemDefinition(); 
            }
            this.state = 190;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

        this.state = 194;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 191;
                this.valuesetDefinition(); 
            }
            this.state = 196;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 200;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 197;
                this.codeDefinition(); 
            }
            this.state = 202;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

        this.state = 206;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 203;
                this.conceptDefinition(); 
            }
            this.state = 208;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

        this.state = 212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7))) !== 0)) {
            this.state = 209;
            this.parameterDefinition();
            this.state = 214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__26 || _la===cqlParser.T__27) {
            this.state = 215;
            this.statement();
            this.state = 220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LibraryDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_libraryDefinition;
    return this;
}

LibraryDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LibraryDefinitionContext.prototype.constructor = LibraryDefinitionContext;

LibraryDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LibraryDefinitionContext.prototype.versionSpecifier = function() {
    return this.getTypedRuleContext(VersionSpecifierContext,0);
};

LibraryDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLibraryDefinition(this);
	}
};

LibraryDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLibraryDefinition(this);
	}
};

LibraryDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLibraryDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.LibraryDefinitionContext = LibraryDefinitionContext;

cqlParser.prototype.libraryDefinition = function() {

    var localctx = new LibraryDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, cqlParser.RULE_libraryDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 221;
        this.match(cqlParser.T__0);
        this.state = 222;
        this.identifier();
        this.state = 225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__1) {
            this.state = 223;
            this.match(cqlParser.T__1);
            this.state = 224;
            this.versionSpecifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_usingDefinition;
    return this;
}

UsingDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingDefinitionContext.prototype.constructor = UsingDefinitionContext;

UsingDefinitionContext.prototype.modelIdentifier = function() {
    return this.getTypedRuleContext(ModelIdentifierContext,0);
};

UsingDefinitionContext.prototype.versionSpecifier = function() {
    return this.getTypedRuleContext(VersionSpecifierContext,0);
};

UsingDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterUsingDefinition(this);
	}
};

UsingDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitUsingDefinition(this);
	}
};

UsingDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitUsingDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.UsingDefinitionContext = UsingDefinitionContext;

cqlParser.prototype.usingDefinition = function() {

    var localctx = new UsingDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, cqlParser.RULE_usingDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 227;
        this.match(cqlParser.T__2);
        this.state = 228;
        this.modelIdentifier();
        this.state = 231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__1) {
            this.state = 229;
            this.match(cqlParser.T__1);
            this.state = 230;
            this.versionSpecifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncludeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_includeDefinition;
    return this;
}

IncludeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeDefinitionContext.prototype.constructor = IncludeDefinitionContext;

IncludeDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IncludeDefinitionContext.prototype.versionSpecifier = function() {
    return this.getTypedRuleContext(VersionSpecifierContext,0);
};

IncludeDefinitionContext.prototype.localIdentifier = function() {
    return this.getTypedRuleContext(LocalIdentifierContext,0);
};

IncludeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIncludeDefinition(this);
	}
};

IncludeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIncludeDefinition(this);
	}
};

IncludeDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIncludeDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.IncludeDefinitionContext = IncludeDefinitionContext;

cqlParser.prototype.includeDefinition = function() {

    var localctx = new IncludeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, cqlParser.RULE_includeDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 233;
        this.match(cqlParser.T__3);
        this.state = 234;
        this.identifier();
        this.state = 237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__1) {
            this.state = 235;
            this.match(cqlParser.T__1);
            this.state = 236;
            this.versionSpecifier();
        }

        this.state = 241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__4) {
            this.state = 239;
            this.match(cqlParser.T__4);
            this.state = 240;
            this.localIdentifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LocalIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_localIdentifier;
    return this;
}

LocalIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalIdentifierContext.prototype.constructor = LocalIdentifierContext;

LocalIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LocalIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLocalIdentifier(this);
	}
};

LocalIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLocalIdentifier(this);
	}
};

LocalIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLocalIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.LocalIdentifierContext = LocalIdentifierContext;

cqlParser.prototype.localIdentifier = function() {

    var localctx = new LocalIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, cqlParser.RULE_localIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AccessModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_accessModifier;
    return this;
}

AccessModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AccessModifierContext.prototype.constructor = AccessModifierContext;


AccessModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterAccessModifier(this);
	}
};

AccessModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitAccessModifier(this);
	}
};

AccessModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitAccessModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.AccessModifierContext = AccessModifierContext;

cqlParser.prototype.accessModifier = function() {

    var localctx = new AccessModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, cqlParser.RULE_accessModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        _la = this._input.LA(1);
        if(!(_la===cqlParser.T__5 || _la===cqlParser.T__6)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_parameterDefinition;
    return this;
}

ParameterDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDefinitionContext.prototype.constructor = ParameterDefinitionContext;

ParameterDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

ParameterDefinitionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

ParameterDefinitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParameterDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterParameterDefinition(this);
	}
};

ParameterDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitParameterDefinition(this);
	}
};

ParameterDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitParameterDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ParameterDefinitionContext = ParameterDefinitionContext;

cqlParser.prototype.parameterDefinition = function() {

    var localctx = new ParameterDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, cqlParser.RULE_parameterDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 247;
            this.accessModifier();
        }

        this.state = 250;
        this.match(cqlParser.T__7);
        this.state = 251;
        this.identifier();
        this.state = 253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__25))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (cqlParser.T__85 - 86)) | (1 << (cqlParser.T__86 - 86)) | (1 << (cqlParser.T__87 - 86)) | (1 << (cqlParser.T__100 - 86)) | (1 << (cqlParser.T__101 - 86)))) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (cqlParser.T__145 - 146)) | (1 << (cqlParser.T__146 - 146)) | (1 << (cqlParser.T__147 - 146)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 146)) | (1 << (cqlParser.IDENTIFIER - 146)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 146)))) !== 0)) {
            this.state = 252;
            this.typeSpecifier();
        }

        this.state = 257;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__8) {
            this.state = 255;
            this.match(cqlParser.T__8);
            this.state = 256;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodesystemDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codesystemDefinition;
    return this;
}

CodesystemDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodesystemDefinitionContext.prototype.constructor = CodesystemDefinitionContext;

CodesystemDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CodesystemDefinitionContext.prototype.codesystemId = function() {
    return this.getTypedRuleContext(CodesystemIdContext,0);
};

CodesystemDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

CodesystemDefinitionContext.prototype.versionSpecifier = function() {
    return this.getTypedRuleContext(VersionSpecifierContext,0);
};

CodesystemDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodesystemDefinition(this);
	}
};

CodesystemDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodesystemDefinition(this);
	}
};

CodesystemDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodesystemDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodesystemDefinitionContext = CodesystemDefinitionContext;

cqlParser.prototype.codesystemDefinition = function() {

    var localctx = new CodesystemDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, cqlParser.RULE_codesystemDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 259;
            this.accessModifier();
        }

        this.state = 262;
        this.match(cqlParser.T__9);
        this.state = 263;
        this.identifier();
        this.state = 264;
        this.match(cqlParser.T__10);
        this.state = 265;
        this.codesystemId();
        this.state = 268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__1) {
            this.state = 266;
            this.match(cqlParser.T__1);
            this.state = 267;
            this.versionSpecifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesetDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_valuesetDefinition;
    return this;
}

ValuesetDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesetDefinitionContext.prototype.constructor = ValuesetDefinitionContext;

ValuesetDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ValuesetDefinitionContext.prototype.valuesetId = function() {
    return this.getTypedRuleContext(ValuesetIdContext,0);
};

ValuesetDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

ValuesetDefinitionContext.prototype.versionSpecifier = function() {
    return this.getTypedRuleContext(VersionSpecifierContext,0);
};

ValuesetDefinitionContext.prototype.codesystems = function() {
    return this.getTypedRuleContext(CodesystemsContext,0);
};

ValuesetDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterValuesetDefinition(this);
	}
};

ValuesetDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitValuesetDefinition(this);
	}
};

ValuesetDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitValuesetDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ValuesetDefinitionContext = ValuesetDefinitionContext;

cqlParser.prototype.valuesetDefinition = function() {

    var localctx = new ValuesetDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, cqlParser.RULE_valuesetDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 270;
            this.accessModifier();
        }

        this.state = 273;
        this.match(cqlParser.T__11);
        this.state = 274;
        this.identifier();
        this.state = 275;
        this.match(cqlParser.T__10);
        this.state = 276;
        this.valuesetId();
        this.state = 279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__1) {
            this.state = 277;
            this.match(cqlParser.T__1);
            this.state = 278;
            this.versionSpecifier();
        }

        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__12) {
            this.state = 281;
            this.codesystems();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodesystemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codesystems;
    return this;
}

CodesystemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodesystemsContext.prototype.constructor = CodesystemsContext;

CodesystemsContext.prototype.codesystemIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodesystemIdentifierContext);
    } else {
        return this.getTypedRuleContext(CodesystemIdentifierContext,i);
    }
};

CodesystemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodesystems(this);
	}
};

CodesystemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodesystems(this);
	}
};

CodesystemsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodesystems(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodesystemsContext = CodesystemsContext;

cqlParser.prototype.codesystems = function() {

    var localctx = new CodesystemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, cqlParser.RULE_codesystems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(cqlParser.T__12);
        this.state = 285;
        this.match(cqlParser.T__13);
        this.state = 286;
        this.codesystemIdentifier();
        this.state = 291;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__14) {
            this.state = 287;
            this.match(cqlParser.T__14);
            this.state = 288;
            this.codesystemIdentifier();
            this.state = 293;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 294;
        this.match(cqlParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodesystemIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codesystemIdentifier;
    return this;
}

CodesystemIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodesystemIdentifierContext.prototype.constructor = CodesystemIdentifierContext;

CodesystemIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CodesystemIdentifierContext.prototype.libraryIdentifier = function() {
    return this.getTypedRuleContext(LibraryIdentifierContext,0);
};

CodesystemIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodesystemIdentifier(this);
	}
};

CodesystemIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodesystemIdentifier(this);
	}
};

CodesystemIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodesystemIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodesystemIdentifierContext = CodesystemIdentifierContext;

cqlParser.prototype.codesystemIdentifier = function() {

    var localctx = new CodesystemIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, cqlParser.RULE_codesystemIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 296;
            this.libraryIdentifier();
            this.state = 297;
            this.match(cqlParser.T__16);

        }
        this.state = 301;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LibraryIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_libraryIdentifier;
    return this;
}

LibraryIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LibraryIdentifierContext.prototype.constructor = LibraryIdentifierContext;

LibraryIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LibraryIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLibraryIdentifier(this);
	}
};

LibraryIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLibraryIdentifier(this);
	}
};

LibraryIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLibraryIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.LibraryIdentifierContext = LibraryIdentifierContext;

cqlParser.prototype.libraryIdentifier = function() {

    var localctx = new LibraryIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, cqlParser.RULE_libraryIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codeDefinition;
    return this;
}

CodeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeDefinitionContext.prototype.constructor = CodeDefinitionContext;

CodeDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CodeDefinitionContext.prototype.codeId = function() {
    return this.getTypedRuleContext(CodeIdContext,0);
};

CodeDefinitionContext.prototype.codesystemIdentifier = function() {
    return this.getTypedRuleContext(CodesystemIdentifierContext,0);
};

CodeDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

CodeDefinitionContext.prototype.displayClause = function() {
    return this.getTypedRuleContext(DisplayClauseContext,0);
};

CodeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodeDefinition(this);
	}
};

CodeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodeDefinition(this);
	}
};

CodeDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodeDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodeDefinitionContext = CodeDefinitionContext;

cqlParser.prototype.codeDefinition = function() {

    var localctx = new CodeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, cqlParser.RULE_codeDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 305;
            this.accessModifier();
        }

        this.state = 308;
        this.match(cqlParser.T__17);
        this.state = 309;
        this.identifier();
        this.state = 310;
        this.match(cqlParser.T__10);
        this.state = 311;
        this.codeId();
        this.state = 312;
        this.match(cqlParser.T__18);
        this.state = 313;
        this.codesystemIdentifier();
        this.state = 315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__145) {
            this.state = 314;
            this.displayClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_conceptDefinition;
    return this;
}

ConceptDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptDefinitionContext.prototype.constructor = ConceptDefinitionContext;

ConceptDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConceptDefinitionContext.prototype.codeIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodeIdentifierContext);
    } else {
        return this.getTypedRuleContext(CodeIdentifierContext,i);
    }
};

ConceptDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

ConceptDefinitionContext.prototype.displayClause = function() {
    return this.getTypedRuleContext(DisplayClauseContext,0);
};

ConceptDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterConceptDefinition(this);
	}
};

ConceptDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitConceptDefinition(this);
	}
};

ConceptDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitConceptDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ConceptDefinitionContext = ConceptDefinitionContext;

cqlParser.prototype.conceptDefinition = function() {

    var localctx = new ConceptDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, cqlParser.RULE_conceptDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 317;
            this.accessModifier();
        }

        this.state = 320;
        this.match(cqlParser.T__19);
        this.state = 321;
        this.identifier();
        this.state = 322;
        this.match(cqlParser.T__10);
        this.state = 323;
        this.match(cqlParser.T__13);
        this.state = 324;
        this.codeIdentifier();
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__14) {
            this.state = 325;
            this.match(cqlParser.T__14);
            this.state = 326;
            this.codeIdentifier();
            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 332;
        this.match(cqlParser.T__15);
        this.state = 334;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__145) {
            this.state = 333;
            this.displayClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codeIdentifier;
    return this;
}

CodeIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeIdentifierContext.prototype.constructor = CodeIdentifierContext;

CodeIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CodeIdentifierContext.prototype.libraryIdentifier = function() {
    return this.getTypedRuleContext(LibraryIdentifierContext,0);
};

CodeIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodeIdentifier(this);
	}
};

CodeIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodeIdentifier(this);
	}
};

CodeIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodeIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodeIdentifierContext = CodeIdentifierContext;

cqlParser.prototype.codeIdentifier = function() {

    var localctx = new CodeIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, cqlParser.RULE_codeIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 336;
            this.libraryIdentifier();
            this.state = 337;
            this.match(cqlParser.T__16);

        }
        this.state = 341;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodesystemIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codesystemId;
    return this;
}

CodesystemIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodesystemIdContext.prototype.constructor = CodesystemIdContext;

CodesystemIdContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

CodesystemIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodesystemId(this);
	}
};

CodesystemIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodesystemId(this);
	}
};

CodesystemIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodesystemId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodesystemIdContext = CodesystemIdContext;

cqlParser.prototype.codesystemId = function() {

    var localctx = new CodesystemIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, cqlParser.RULE_codesystemId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(cqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesetIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_valuesetId;
    return this;
}

ValuesetIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesetIdContext.prototype.constructor = ValuesetIdContext;

ValuesetIdContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

ValuesetIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterValuesetId(this);
	}
};

ValuesetIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitValuesetId(this);
	}
};

ValuesetIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitValuesetId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ValuesetIdContext = ValuesetIdContext;

cqlParser.prototype.valuesetId = function() {

    var localctx = new ValuesetIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, cqlParser.RULE_valuesetId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        this.match(cqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VersionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_versionSpecifier;
    return this;
}

VersionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionSpecifierContext.prototype.constructor = VersionSpecifierContext;

VersionSpecifierContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

VersionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterVersionSpecifier(this);
	}
};

VersionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitVersionSpecifier(this);
	}
};

VersionSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitVersionSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.VersionSpecifierContext = VersionSpecifierContext;

cqlParser.prototype.versionSpecifier = function() {

    var localctx = new VersionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, cqlParser.RULE_versionSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.match(cqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codeId;
    return this;
}

CodeIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeIdContext.prototype.constructor = CodeIdContext;

CodeIdContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

CodeIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodeId(this);
	}
};

CodeIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodeId(this);
	}
};

CodeIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodeId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodeIdContext = CodeIdContext;

cqlParser.prototype.codeId = function() {

    var localctx = new CodeIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, cqlParser.RULE_codeId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(cqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_typeSpecifier;
    return this;
}

TypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecifierContext.prototype.constructor = TypeSpecifierContext;

TypeSpecifierContext.prototype.namedTypeSpecifier = function() {
    return this.getTypedRuleContext(NamedTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.listTypeSpecifier = function() {
    return this.getTypedRuleContext(ListTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.intervalTypeSpecifier = function() {
    return this.getTypedRuleContext(IntervalTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.tupleTypeSpecifier = function() {
    return this.getTypedRuleContext(TupleTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.choiceTypeSpecifier = function() {
    return this.getTypedRuleContext(ChoiceTypeSpecifierContext,0);
};

TypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTypeSpecifier(this);
	}
};

TypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTypeSpecifier(this);
	}
};

TypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TypeSpecifierContext = TypeSpecifierContext;

cqlParser.prototype.typeSpecifier = function() {

    var localctx = new TypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, cqlParser.RULE_typeSpecifier);
    try {
        this.state = 356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__1:
        case cqlParser.T__17:
        case cqlParser.T__19:
        case cqlParser.T__85:
        case cqlParser.T__86:
        case cqlParser.T__87:
        case cqlParser.T__100:
        case cqlParser.T__101:
        case cqlParser.T__145:
        case cqlParser.T__146:
        case cqlParser.T__147:
        case cqlParser.QUOTEDIDENTIFIER:
        case cqlParser.IDENTIFIER:
        case cqlParser.DELIMITEDIDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 351;
            this.namedTypeSpecifier();
            break;
        case cqlParser.T__20:
            this.enterOuterAlt(localctx, 2);
            this.state = 352;
            this.listTypeSpecifier();
            break;
        case cqlParser.T__23:
            this.enterOuterAlt(localctx, 3);
            this.state = 353;
            this.intervalTypeSpecifier();
            break;
        case cqlParser.T__24:
            this.enterOuterAlt(localctx, 4);
            this.state = 354;
            this.tupleTypeSpecifier();
            break;
        case cqlParser.T__25:
            this.enterOuterAlt(localctx, 5);
            this.state = 355;
            this.choiceTypeSpecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_namedTypeSpecifier;
    return this;
}

NamedTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedTypeSpecifierContext.prototype.constructor = NamedTypeSpecifierContext;

NamedTypeSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedTypeSpecifierContext.prototype.qualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifierContext);
    } else {
        return this.getTypedRuleContext(QualifierContext,i);
    }
};

NamedTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterNamedTypeSpecifier(this);
	}
};

NamedTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitNamedTypeSpecifier(this);
	}
};

NamedTypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitNamedTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.NamedTypeSpecifierContext = NamedTypeSpecifierContext;

cqlParser.prototype.namedTypeSpecifier = function() {

    var localctx = new NamedTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, cqlParser.RULE_namedTypeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 358;
                this.qualifier();
                this.state = 359;
                this.match(cqlParser.T__16); 
            }
            this.state = 365;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

        this.state = 366;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModelIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_modelIdentifier;
    return this;
}

ModelIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModelIdentifierContext.prototype.constructor = ModelIdentifierContext;

ModelIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModelIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterModelIdentifier(this);
	}
};

ModelIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitModelIdentifier(this);
	}
};

ModelIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitModelIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ModelIdentifierContext = ModelIdentifierContext;

cqlParser.prototype.modelIdentifier = function() {

    var localctx = new ModelIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, cqlParser.RULE_modelIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_listTypeSpecifier;
    return this;
}

ListTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListTypeSpecifierContext.prototype.constructor = ListTypeSpecifierContext;

ListTypeSpecifierContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

ListTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterListTypeSpecifier(this);
	}
};

ListTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitListTypeSpecifier(this);
	}
};

ListTypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitListTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ListTypeSpecifierContext = ListTypeSpecifierContext;

cqlParser.prototype.listTypeSpecifier = function() {

    var localctx = new ListTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, cqlParser.RULE_listTypeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(cqlParser.T__20);
        this.state = 371;
        this.match(cqlParser.T__21);
        this.state = 372;
        this.typeSpecifier();
        this.state = 373;
        this.match(cqlParser.T__22);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_intervalTypeSpecifier;
    return this;
}

IntervalTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalTypeSpecifierContext.prototype.constructor = IntervalTypeSpecifierContext;

IntervalTypeSpecifierContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

IntervalTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIntervalTypeSpecifier(this);
	}
};

IntervalTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIntervalTypeSpecifier(this);
	}
};

IntervalTypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIntervalTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.IntervalTypeSpecifierContext = IntervalTypeSpecifierContext;

cqlParser.prototype.intervalTypeSpecifier = function() {

    var localctx = new IntervalTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, cqlParser.RULE_intervalTypeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this.match(cqlParser.T__23);
        this.state = 376;
        this.match(cqlParser.T__21);
        this.state = 377;
        this.typeSpecifier();
        this.state = 378;
        this.match(cqlParser.T__22);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_tupleTypeSpecifier;
    return this;
}

TupleTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleTypeSpecifierContext.prototype.constructor = TupleTypeSpecifierContext;

TupleTypeSpecifierContext.prototype.tupleElementDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TupleElementDefinitionContext);
    } else {
        return this.getTypedRuleContext(TupleElementDefinitionContext,i);
    }
};

TupleTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTupleTypeSpecifier(this);
	}
};

TupleTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTupleTypeSpecifier(this);
	}
};

TupleTypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTupleTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TupleTypeSpecifierContext = TupleTypeSpecifierContext;

cqlParser.prototype.tupleTypeSpecifier = function() {

    var localctx = new TupleTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, cqlParser.RULE_tupleTypeSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.match(cqlParser.T__24);
        this.state = 381;
        this.match(cqlParser.T__13);
        this.state = 382;
        this.tupleElementDefinition();
        this.state = 387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__14) {
            this.state = 383;
            this.match(cqlParser.T__14);
            this.state = 384;
            this.tupleElementDefinition();
            this.state = 389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 390;
        this.match(cqlParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleElementDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_tupleElementDefinition;
    return this;
}

TupleElementDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleElementDefinitionContext.prototype.constructor = TupleElementDefinitionContext;

TupleElementDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TupleElementDefinitionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

TupleElementDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTupleElementDefinition(this);
	}
};

TupleElementDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTupleElementDefinition(this);
	}
};

TupleElementDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTupleElementDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TupleElementDefinitionContext = TupleElementDefinitionContext;

cqlParser.prototype.tupleElementDefinition = function() {

    var localctx = new TupleElementDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, cqlParser.RULE_tupleElementDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.identifier();
        this.state = 393;
        this.typeSpecifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoiceTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_choiceTypeSpecifier;
    return this;
}

ChoiceTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceTypeSpecifierContext.prototype.constructor = ChoiceTypeSpecifierContext;

ChoiceTypeSpecifierContext.prototype.typeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeSpecifierContext,i);
    }
};

ChoiceTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterChoiceTypeSpecifier(this);
	}
};

ChoiceTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitChoiceTypeSpecifier(this);
	}
};

ChoiceTypeSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitChoiceTypeSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ChoiceTypeSpecifierContext = ChoiceTypeSpecifierContext;

cqlParser.prototype.choiceTypeSpecifier = function() {

    var localctx = new ChoiceTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, cqlParser.RULE_choiceTypeSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this.match(cqlParser.T__25);
        this.state = 396;
        this.match(cqlParser.T__21);
        this.state = 397;
        this.typeSpecifier();
        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__14) {
            this.state = 398;
            this.match(cqlParser.T__14);
            this.state = 399;
            this.typeSpecifier();
            this.state = 404;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 405;
        this.match(cqlParser.T__22);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.expressionDefinition = function() {
    return this.getTypedRuleContext(ExpressionDefinitionContext,0);
};

StatementContext.prototype.contextDefinition = function() {
    return this.getTypedRuleContext(ContextDefinitionContext,0);
};

StatementContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.StatementContext = StatementContext;

cqlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, cqlParser.RULE_statement);
    try {
        this.state = 410;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 407;
            this.expressionDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 408;
            this.contextDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 409;
            this.functionDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_expressionDefinition;
    return this;
}

ExpressionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionDefinitionContext.prototype.constructor = ExpressionDefinitionContext;

ExpressionDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExpressionDefinitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

ExpressionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterExpressionDefinition(this);
	}
};

ExpressionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitExpressionDefinition(this);
	}
};

ExpressionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitExpressionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ExpressionDefinitionContext = ExpressionDefinitionContext;

cqlParser.prototype.expressionDefinition = function() {

    var localctx = new ExpressionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, cqlParser.RULE_expressionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this.match(cqlParser.T__26);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 413;
            this.accessModifier();
        }

        this.state = 416;
        this.identifier();
        this.state = 417;
        this.match(cqlParser.T__10);
        this.state = 418;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContextDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_contextDefinition;
    return this;
}

ContextDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContextDefinitionContext.prototype.constructor = ContextDefinitionContext;

ContextDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ContextDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterContextDefinition(this);
	}
};

ContextDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitContextDefinition(this);
	}
};

ContextDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitContextDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ContextDefinitionContext = ContextDefinitionContext;

cqlParser.prototype.contextDefinition = function() {

    var localctx = new ContextDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, cqlParser.RULE_contextDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this.match(cqlParser.T__27);
        this.state = 421;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDefinitionContext.prototype.accessModifier = function() {
    return this.getTypedRuleContext(AccessModifierContext,0);
};

FunctionDefinitionContext.prototype.operandDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperandDefinitionContext);
    } else {
        return this.getTypedRuleContext(OperandDefinitionContext,i);
    }
};

FunctionDefinitionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitFunctionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.FunctionDefinitionContext = FunctionDefinitionContext;

cqlParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, cqlParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.match(cqlParser.T__26);
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__5 || _la===cqlParser.T__6) {
            this.state = 424;
            this.accessModifier();
        }

        this.state = 427;
        this.match(cqlParser.T__28);
        this.state = 428;
        this.identifier();
        this.state = 429;
        this.match(cqlParser.T__29);
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (cqlParser.T__85 - 86)) | (1 << (cqlParser.T__86 - 86)) | (1 << (cqlParser.T__87 - 86)) | (1 << (cqlParser.T__100 - 86)) | (1 << (cqlParser.T__101 - 86)))) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (cqlParser.T__145 - 146)) | (1 << (cqlParser.T__146 - 146)) | (1 << (cqlParser.T__147 - 146)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 146)) | (1 << (cqlParser.IDENTIFIER - 146)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 146)))) !== 0)) {
            this.state = 430;
            this.operandDefinition();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===cqlParser.T__14) {
                this.state = 431;
                this.match(cqlParser.T__14);
                this.state = 432;
                this.operandDefinition();
                this.state = 437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 440;
        this.match(cqlParser.T__30);
        this.state = 443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__31) {
            this.state = 441;
            this.match(cqlParser.T__31);
            this.state = 442;
            this.typeSpecifier();
        }

        this.state = 445;
        this.match(cqlParser.T__10);
        this.state = 448;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__1:
        case cqlParser.T__13:
        case cqlParser.T__17:
        case cqlParser.T__18:
        case cqlParser.T__19:
        case cqlParser.T__20:
        case cqlParser.T__23:
        case cqlParser.T__24:
        case cqlParser.T__29:
        case cqlParser.T__36:
        case cqlParser.T__43:
        case cqlParser.T__51:
        case cqlParser.T__52:
        case cqlParser.T__53:
        case cqlParser.T__54:
        case cqlParser.T__56:
        case cqlParser.T__57:
        case cqlParser.T__61:
        case cqlParser.T__62:
        case cqlParser.T__77:
        case cqlParser.T__78:
        case cqlParser.T__79:
        case cqlParser.T__80:
        case cqlParser.T__81:
        case cqlParser.T__82:
        case cqlParser.T__83:
        case cqlParser.T__84:
        case cqlParser.T__85:
        case cqlParser.T__86:
        case cqlParser.T__87:
        case cqlParser.T__88:
        case cqlParser.T__89:
        case cqlParser.T__90:
        case cqlParser.T__91:
        case cqlParser.T__92:
        case cqlParser.T__93:
        case cqlParser.T__94:
        case cqlParser.T__95:
        case cqlParser.T__96:
        case cqlParser.T__98:
        case cqlParser.T__99:
        case cqlParser.T__100:
        case cqlParser.T__101:
        case cqlParser.T__103:
        case cqlParser.T__104:
        case cqlParser.T__105:
        case cqlParser.T__106:
        case cqlParser.T__107:
        case cqlParser.T__108:
        case cqlParser.T__109:
        case cqlParser.T__116:
        case cqlParser.T__119:
        case cqlParser.T__120:
        case cqlParser.T__121:
        case cqlParser.T__122:
        case cqlParser.T__145:
        case cqlParser.T__146:
        case cqlParser.T__147:
        case cqlParser.T__148:
        case cqlParser.T__149:
        case cqlParser.T__150:
        case cqlParser.T__151:
        case cqlParser.QUOTEDIDENTIFIER:
        case cqlParser.DATETIME:
        case cqlParser.TIME:
        case cqlParser.IDENTIFIER:
        case cqlParser.DELIMITEDIDENTIFIER:
        case cqlParser.STRING:
        case cqlParser.NUMBER:
            this.state = 446;
            this.functionBody();
            break;
        case cqlParser.T__32:
            this.state = 447;
            this.match(cqlParser.T__32);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperandDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_operandDefinition;
    return this;
}

OperandDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperandDefinitionContext.prototype.constructor = OperandDefinitionContext;

OperandDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

OperandDefinitionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

OperandDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterOperandDefinition(this);
	}
};

OperandDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitOperandDefinition(this);
	}
};

OperandDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitOperandDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.OperandDefinitionContext = OperandDefinitionContext;

cqlParser.prototype.operandDefinition = function() {

    var localctx = new OperandDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, cqlParser.RULE_operandDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 450;
        this.identifier();
        this.state = 451;
        this.typeSpecifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterFunctionBody(this);
	}
};

FunctionBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitFunctionBody(this);
	}
};

FunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.FunctionBodyContext = FunctionBodyContext;

cqlParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, cqlParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_querySource;
    return this;
}

QuerySourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySourceContext.prototype.constructor = QuerySourceContext;

QuerySourceContext.prototype.retrieve = function() {
    return this.getTypedRuleContext(RetrieveContext,0);
};

QuerySourceContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

QuerySourceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

QuerySourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQuerySource(this);
	}
};

QuerySourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQuerySource(this);
	}
};

QuerySourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQuerySource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QuerySourceContext = QuerySourceContext;

cqlParser.prototype.querySource = function() {

    var localctx = new QuerySourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, cqlParser.RULE_querySource);
    try {
        this.state = 461;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__36:
            this.enterOuterAlt(localctx, 1);
            this.state = 455;
            this.retrieve();
            break;
        case cqlParser.T__1:
        case cqlParser.T__17:
        case cqlParser.T__19:
        case cqlParser.T__85:
        case cqlParser.T__86:
        case cqlParser.T__87:
        case cqlParser.T__100:
        case cqlParser.T__101:
        case cqlParser.T__145:
        case cqlParser.T__146:
        case cqlParser.T__147:
        case cqlParser.QUOTEDIDENTIFIER:
        case cqlParser.IDENTIFIER:
        case cqlParser.DELIMITEDIDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 456;
            this.qualifiedIdentifier();
            break;
        case cqlParser.T__29:
            this.enterOuterAlt(localctx, 3);
            this.state = 457;
            this.match(cqlParser.T__29);
            this.state = 458;
            this.expression(0);
            this.state = 459;
            this.match(cqlParser.T__30);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasedQuerySourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_aliasedQuerySource;
    return this;
}

AliasedQuerySourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedQuerySourceContext.prototype.constructor = AliasedQuerySourceContext;

AliasedQuerySourceContext.prototype.querySource = function() {
    return this.getTypedRuleContext(QuerySourceContext,0);
};

AliasedQuerySourceContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

AliasedQuerySourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterAliasedQuerySource(this);
	}
};

AliasedQuerySourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitAliasedQuerySource(this);
	}
};

AliasedQuerySourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitAliasedQuerySource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.AliasedQuerySourceContext = AliasedQuerySourceContext;

cqlParser.prototype.aliasedQuerySource = function() {

    var localctx = new AliasedQuerySourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, cqlParser.RULE_aliasedQuerySource);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.querySource();
        this.state = 464;
        this.alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_alias;
    return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitAlias(this);
	}
};

AliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.AliasContext = AliasContext;

cqlParser.prototype.alias = function() {

    var localctx = new AliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, cqlParser.RULE_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryInclusionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_queryInclusionClause;
    return this;
}

QueryInclusionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryInclusionClauseContext.prototype.constructor = QueryInclusionClauseContext;

QueryInclusionClauseContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

QueryInclusionClauseContext.prototype.withoutClause = function() {
    return this.getTypedRuleContext(WithoutClauseContext,0);
};

QueryInclusionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQueryInclusionClause(this);
	}
};

QueryInclusionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQueryInclusionClause(this);
	}
};

QueryInclusionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQueryInclusionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QueryInclusionClauseContext = QueryInclusionClauseContext;

cqlParser.prototype.queryInclusionClause = function() {

    var localctx = new QueryInclusionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, cqlParser.RULE_queryInclusionClause);
    try {
        this.state = 470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__33:
            this.enterOuterAlt(localctx, 1);
            this.state = 468;
            this.withClause();
            break;
        case cqlParser.T__35:
            this.enterOuterAlt(localctx, 2);
            this.state = 469;
            this.withoutClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_withClause;
    return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.aliasedQuerySource = function() {
    return this.getTypedRuleContext(AliasedQuerySourceContext,0);
};

WithClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WithClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterWithClause(this);
	}
};

WithClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitWithClause(this);
	}
};

WithClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitWithClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.WithClauseContext = WithClauseContext;

cqlParser.prototype.withClause = function() {

    var localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, cqlParser.RULE_withClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 472;
        this.match(cqlParser.T__33);
        this.state = 473;
        this.aliasedQuerySource();
        this.state = 474;
        this.match(cqlParser.T__34);
        this.state = 475;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithoutClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_withoutClause;
    return this;
}

WithoutClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithoutClauseContext.prototype.constructor = WithoutClauseContext;

WithoutClauseContext.prototype.aliasedQuerySource = function() {
    return this.getTypedRuleContext(AliasedQuerySourceContext,0);
};

WithoutClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WithoutClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterWithoutClause(this);
	}
};

WithoutClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitWithoutClause(this);
	}
};

WithoutClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitWithoutClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.WithoutClauseContext = WithoutClauseContext;

cqlParser.prototype.withoutClause = function() {

    var localctx = new WithoutClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, cqlParser.RULE_withoutClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477;
        this.match(cqlParser.T__35);
        this.state = 478;
        this.aliasedQuerySource();
        this.state = 479;
        this.match(cqlParser.T__34);
        this.state = 480;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RetrieveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_retrieve;
    return this;
}

RetrieveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RetrieveContext.prototype.constructor = RetrieveContext;

RetrieveContext.prototype.namedTypeSpecifier = function() {
    return this.getTypedRuleContext(NamedTypeSpecifierContext,0);
};

RetrieveContext.prototype.terminology = function() {
    return this.getTypedRuleContext(TerminologyContext,0);
};

RetrieveContext.prototype.codePath = function() {
    return this.getTypedRuleContext(CodePathContext,0);
};

RetrieveContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterRetrieve(this);
	}
};

RetrieveContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitRetrieve(this);
	}
};

RetrieveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitRetrieve(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.RetrieveContext = RetrieveContext;

cqlParser.prototype.retrieve = function() {

    var localctx = new RetrieveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, cqlParser.RULE_retrieve);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.match(cqlParser.T__36);
        this.state = 483;
        this.namedTypeSpecifier();
        this.state = 491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__10) {
            this.state = 484;
            this.match(cqlParser.T__10);
            this.state = 488;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 485;
                this.codePath();
                this.state = 486;
                this.match(cqlParser.T__37);

            }
            this.state = 490;
            this.terminology();
        }

        this.state = 493;
        this.match(cqlParser.T__38);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codePath;
    return this;
}

CodePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodePathContext.prototype.constructor = CodePathContext;

CodePathContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CodePathContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodePath(this);
	}
};

CodePathContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodePath(this);
	}
};

CodePathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodePath(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodePathContext = CodePathContext;

cqlParser.prototype.codePath = function() {

    var localctx = new CodePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, cqlParser.RULE_codePath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TerminologyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_terminology;
    return this;
}

TerminologyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TerminologyContext.prototype.constructor = TerminologyContext;

TerminologyContext.prototype.qualifiedIdentifier = function() {
    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
};

TerminologyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TerminologyContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTerminology(this);
	}
};

TerminologyContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTerminology(this);
	}
};

TerminologyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTerminology(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TerminologyContext = TerminologyContext;

cqlParser.prototype.terminology = function() {

    var localctx = new TerminologyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, cqlParser.RULE_terminology);
    try {
        this.state = 499;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 497;
            this.qualifiedIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 498;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_qualifier;
    return this;
}

QualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifierContext.prototype.constructor = QualifierContext;

QualifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

QualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQualifier(this);
	}
};

QualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQualifier(this);
	}
};

QualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QualifierContext = QualifierContext;

cqlParser.prototype.qualifier = function() {

    var localctx = new QualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, cqlParser.RULE_qualifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.sourceClause = function() {
    return this.getTypedRuleContext(SourceClauseContext,0);
};

QueryContext.prototype.letClause = function() {
    return this.getTypedRuleContext(LetClauseContext,0);
};

QueryContext.prototype.queryInclusionClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryInclusionClauseContext);
    } else {
        return this.getTypedRuleContext(QueryInclusionClauseContext,i);
    }
};

QueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

QueryContext.prototype.returnClause = function() {
    return this.getTypedRuleContext(ReturnClauseContext,0);
};

QueryContext.prototype.sortClause = function() {
    return this.getTypedRuleContext(SortClauseContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QueryContext = QueryContext;

cqlParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, cqlParser.RULE_query);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.sourceClause();
        this.state = 505;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 504;
            this.letClause();

        }
        this.state = 510;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 507;
                this.queryInclusionClause(); 
            }
            this.state = 512;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

        this.state = 514;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 513;
            this.whereClause();

        }
        this.state = 517;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 516;
            this.returnClause();

        }
        this.state = 520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 519;
            this.sortClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_sourceClause;
    return this;
}

SourceClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceClauseContext.prototype.constructor = SourceClauseContext;

SourceClauseContext.prototype.aliasedQuerySource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AliasedQuerySourceContext);
    } else {
        return this.getTypedRuleContext(AliasedQuerySourceContext,i);
    }
};

SourceClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterSourceClause(this);
	}
};

SourceClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitSourceClause(this);
	}
};

SourceClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitSourceClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.SourceClauseContext = SourceClauseContext;

cqlParser.prototype.sourceClause = function() {

    var localctx = new SourceClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, cqlParser.RULE_sourceClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__18) {
            this.state = 522;
            this.match(cqlParser.T__18);
        }

        this.state = 525;
        this.aliasedQuerySource();
        this.state = 530;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 526;
                this.match(cqlParser.T__14);
                this.state = 527;
                this.aliasedQuerySource(); 
            }
            this.state = 532;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_letClause;
    return this;
}

LetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetClauseContext.prototype.constructor = LetClauseContext;

LetClauseContext.prototype.letClauseItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LetClauseItemContext);
    } else {
        return this.getTypedRuleContext(LetClauseItemContext,i);
    }
};

LetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLetClause(this);
	}
};

LetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLetClause(this);
	}
};

LetClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLetClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.LetClauseContext = LetClauseContext;

cqlParser.prototype.letClause = function() {

    var localctx = new LetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, cqlParser.RULE_letClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this.match(cqlParser.T__39);
        this.state = 534;
        this.letClauseItem();
        this.state = 539;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 535;
                this.match(cqlParser.T__14);
                this.state = 536;
                this.letClauseItem(); 
            }
            this.state = 541;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LetClauseItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_letClauseItem;
    return this;
}

LetClauseItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetClauseItemContext.prototype.constructor = LetClauseItemContext;

LetClauseItemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LetClauseItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LetClauseItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLetClauseItem(this);
	}
};

LetClauseItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLetClauseItem(this);
	}
};

LetClauseItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLetClauseItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.LetClauseItemContext = LetClauseItemContext;

cqlParser.prototype.letClauseItem = function() {

    var localctx = new LetClauseItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, cqlParser.RULE_letClauseItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this.identifier();
        this.state = 543;
        this.match(cqlParser.T__10);
        this.state = 544;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitWhereClause(this);
	}
};

WhereClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitWhereClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.WhereClauseContext = WhereClauseContext;

cqlParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, cqlParser.RULE_whereClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.match(cqlParser.T__40);
        this.state = 547;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_returnClause;
    return this;
}

ReturnClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnClauseContext.prototype.constructor = ReturnClauseContext;

ReturnClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterReturnClause(this);
	}
};

ReturnClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitReturnClause(this);
	}
};

ReturnClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitReturnClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ReturnClauseContext = ReturnClauseContext;

cqlParser.prototype.returnClause = function() {

    var localctx = new ReturnClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, cqlParser.RULE_returnClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549;
        this.match(cqlParser.T__41);
        this.state = 551;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 550;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__42 || _la===cqlParser.T__43)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 553;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_sortClause;
    return this;
}

SortClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortClauseContext.prototype.constructor = SortClauseContext;

SortClauseContext.prototype.sortDirection = function() {
    return this.getTypedRuleContext(SortDirectionContext,0);
};

SortClauseContext.prototype.sortByItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortByItemContext);
    } else {
        return this.getTypedRuleContext(SortByItemContext,i);
    }
};

SortClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterSortClause(this);
	}
};

SortClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitSortClause(this);
	}
};

SortClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitSortClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.SortClauseContext = SortClauseContext;

cqlParser.prototype.sortClause = function() {

    var localctx = new SortClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, cqlParser.RULE_sortClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 555;
        this.match(cqlParser.T__44);
        this.state = 566;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__46:
        case cqlParser.T__47:
        case cqlParser.T__48:
        case cqlParser.T__49:
            this.state = 556;
            this.sortDirection();
            break;
        case cqlParser.T__45:
            this.state = 557;
            this.match(cqlParser.T__45);
            this.state = 558;
            this.sortByItem();
            this.state = 563;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 559;
                    this.match(cqlParser.T__14);
                    this.state = 560;
                    this.sortByItem(); 
                }
                this.state = 565;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortDirectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_sortDirection;
    return this;
}

SortDirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortDirectionContext.prototype.constructor = SortDirectionContext;


SortDirectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterSortDirection(this);
	}
};

SortDirectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitSortDirection(this);
	}
};

SortDirectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitSortDirection(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.SortDirectionContext = SortDirectionContext;

cqlParser.prototype.sortDirection = function() {

    var localctx = new SortDirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, cqlParser.RULE_sortDirection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        _la = this._input.LA(1);
        if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (cqlParser.T__46 - 47)) | (1 << (cqlParser.T__47 - 47)) | (1 << (cqlParser.T__48 - 47)) | (1 << (cqlParser.T__49 - 47)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortByItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_sortByItem;
    return this;
}

SortByItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortByItemContext.prototype.constructor = SortByItemContext;

SortByItemContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};

SortByItemContext.prototype.sortDirection = function() {
    return this.getTypedRuleContext(SortDirectionContext,0);
};

SortByItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterSortByItem(this);
	}
};

SortByItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitSortByItem(this);
	}
};

SortByItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitSortByItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.SortByItemContext = SortByItemContext;

cqlParser.prototype.sortByItem = function() {

    var localctx = new SortByItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, cqlParser.RULE_sortByItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.expressionTerm(0);
        this.state = 572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 571;
            this.sortDirection();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_qualifiedIdentifier;
    return this;
}

QualifiedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedIdentifierContext.prototype.constructor = QualifiedIdentifierContext;

QualifiedIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

QualifiedIdentifierContext.prototype.qualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifierContext);
    } else {
        return this.getTypedRuleContext(QualifierContext,i);
    }
};

QualifiedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQualifiedIdentifier(this);
	}
};

QualifiedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQualifiedIdentifier(this);
	}
};

QualifiedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQualifiedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QualifiedIdentifierContext = QualifiedIdentifierContext;

cqlParser.prototype.qualifiedIdentifier = function() {

    var localctx = new QualifiedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, cqlParser.RULE_qualifiedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 579;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 574;
                this.qualifier();
                this.state = 575;
                this.match(cqlParser.T__16); 
            }
            this.state = 581;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
        }

        this.state = 582;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DurationBetweenExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DurationBetweenExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DurationBetweenExpressionContext.prototype.constructor = DurationBetweenExpressionContext;

cqlParser.DurationBetweenExpressionContext = DurationBetweenExpressionContext;

DurationBetweenExpressionContext.prototype.pluralDateTimePrecision = function() {
    return this.getTypedRuleContext(PluralDateTimePrecisionContext,0);
};

DurationBetweenExpressionContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};
DurationBetweenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDurationBetweenExpression(this);
	}
};

DurationBetweenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDurationBetweenExpression(this);
	}
};

DurationBetweenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDurationBetweenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InFixSetExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InFixSetExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InFixSetExpressionContext.prototype.constructor = InFixSetExpressionContext;

cqlParser.InFixSetExpressionContext = InFixSetExpressionContext;

InFixSetExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InFixSetExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInFixSetExpression(this);
	}
};

InFixSetExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInFixSetExpression(this);
	}
};

InFixSetExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInFixSetExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RetrieveExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RetrieveExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RetrieveExpressionContext.prototype.constructor = RetrieveExpressionContext;

cqlParser.RetrieveExpressionContext = RetrieveExpressionContext;

RetrieveExpressionContext.prototype.retrieve = function() {
    return this.getTypedRuleContext(RetrieveContext,0);
};
RetrieveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterRetrieveExpression(this);
	}
};

RetrieveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitRetrieveExpression(this);
	}
};

RetrieveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitRetrieveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TimingExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimingExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TimingExpressionContext.prototype.constructor = TimingExpressionContext;

cqlParser.TimingExpressionContext = TimingExpressionContext;

TimingExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TimingExpressionContext.prototype.intervalOperatorPhrase = function() {
    return this.getTypedRuleContext(IntervalOperatorPhraseContext,0);
};
TimingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTimingExpression(this);
	}
};

TimingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTimingExpression(this);
	}
};

TimingExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTimingExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryExpressionContext.prototype = Object.create(ExpressionContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

cqlParser.QueryExpressionContext = QueryExpressionContext;

QueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
QueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQueryExpression(this);
	}
};

QueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQueryExpression(this);
	}
};

QueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

cqlParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitNotExpression(this);
	}
};

NotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;

cqlParser.BooleanExpressionContext = BooleanExpressionContext;

BooleanExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
BooleanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterBooleanExpression(this);
	}
};

BooleanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitBooleanExpression(this);
	}
};

BooleanExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitBooleanExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
OrExpressionContext.prototype.constructor = OrExpressionContext;

cqlParser.OrExpressionContext = OrExpressionContext;

OrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterOrExpression(this);
	}
};

OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitOrExpression(this);
	}
};

OrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

cqlParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastExpressionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCastExpression(this);
	}
};

CastExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCastExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

cqlParser.AndExpressionContext = AndExpressionContext;

AndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitAndExpression(this);
	}
};

AndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BetweenExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BetweenExpressionContext.prototype.constructor = BetweenExpressionContext;

cqlParser.BetweenExpressionContext = BetweenExpressionContext;

BetweenExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BetweenExpressionContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};
BetweenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterBetweenExpression(this);
	}
};

BetweenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitBetweenExpression(this);
	}
};

BetweenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitBetweenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MembershipExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MembershipExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MembershipExpressionContext.prototype.constructor = MembershipExpressionContext;

cqlParser.MembershipExpressionContext = MembershipExpressionContext;

MembershipExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MembershipExpressionContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
MembershipExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterMembershipExpression(this);
	}
};

MembershipExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitMembershipExpression(this);
	}
};

MembershipExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitMembershipExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DifferenceBetweenExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DifferenceBetweenExpressionContext.prototype = Object.create(ExpressionContext.prototype);
DifferenceBetweenExpressionContext.prototype.constructor = DifferenceBetweenExpressionContext;

cqlParser.DifferenceBetweenExpressionContext = DifferenceBetweenExpressionContext;

DifferenceBetweenExpressionContext.prototype.pluralDateTimePrecision = function() {
    return this.getTypedRuleContext(PluralDateTimePrecisionContext,0);
};

DifferenceBetweenExpressionContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};
DifferenceBetweenExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDifferenceBetweenExpression(this);
	}
};

DifferenceBetweenExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDifferenceBetweenExpression(this);
	}
};

DifferenceBetweenExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDifferenceBetweenExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InequalityExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InequalityExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InequalityExpressionContext.prototype.constructor = InequalityExpressionContext;

cqlParser.InequalityExpressionContext = InequalityExpressionContext;

InequalityExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InequalityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInequalityExpression(this);
	}
};

InequalityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInequalityExpression(this);
	}
};

InequalityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInequalityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EqualityExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(ExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

cqlParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitEqualityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistenceExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistenceExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ExistenceExpressionContext.prototype.constructor = ExistenceExpressionContext;

cqlParser.ExistenceExpressionContext = ExistenceExpressionContext;

ExistenceExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExistenceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterExistenceExpression(this);
	}
};

ExistenceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitExistenceExpression(this);
	}
};

ExistenceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitExistenceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ImpliesExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImpliesExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ImpliesExpressionContext.prototype.constructor = ImpliesExpressionContext;

cqlParser.ImpliesExpressionContext = ImpliesExpressionContext;

ImpliesExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ImpliesExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterImpliesExpression(this);
	}
};

ImpliesExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitImpliesExpression(this);
	}
};

ImpliesExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitImpliesExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TermExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TermExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TermExpressionContext.prototype.constructor = TermExpressionContext;

cqlParser.TermExpressionContext = TermExpressionContext;

TermExpressionContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
TermExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTermExpression(this);
	}
};

TermExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTermExpression(this);
	}
};

TermExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTermExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TypeExpressionContext.prototype.constructor = TypeExpressionContext;

cqlParser.TypeExpressionContext = TypeExpressionContext;

TypeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeExpressionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};
TypeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTypeExpression(this);
	}
};

TypeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTypeExpression(this);
	}
};

TypeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTypeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



cqlParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 106;
    this.enterRecursionRule(localctx, 106, cqlParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TermExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 585;
            this.expressionTerm(0);
            break;

        case 2:
            localctx = new RetrieveExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 586;
            this.retrieve();
            break;

        case 3:
            localctx = new QueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 587;
            this.query();
            break;

        case 4:
            localctx = new CastExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 588;
            this.match(cqlParser.T__56);
            this.state = 589;
            this.expression(0);
            this.state = 590;
            this.match(cqlParser.T__55);
            this.state = 591;
            this.typeSpecifier();
            break;

        case 5:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 593;
            this.match(cqlParser.T__51);
            this.state = 594;
            this.expression(13);
            break;

        case 6:
            localctx = new ExistenceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 595;
            this.match(cqlParser.T__57);
            this.state = 596;
            this.expression(12);
            break;

        case 7:
            localctx = new DurationBetweenExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__61) {
                this.state = 597;
                this.match(cqlParser.T__61);
                this.state = 598;
                this.match(cqlParser.T__37);
            }

            this.state = 601;
            this.pluralDateTimePrecision();
            this.state = 602;
            this.match(cqlParser.T__59);
            this.state = 603;
            this.expressionTerm(0);
            this.state = 604;
            this.match(cqlParser.T__60);
            this.state = 605;
            this.expressionTerm(0);
            break;

        case 8:
            localctx = new DifferenceBetweenExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 607;
            this.match(cqlParser.T__62);
            this.state = 608;
            this.match(cqlParser.T__37);
            this.state = 609;
            this.pluralDateTimePrecision();
            this.state = 610;
            this.match(cqlParser.T__59);
            this.state = 611;
            this.expressionTerm(0);
            this.state = 612;
            this.match(cqlParser.T__60);
            this.state = 613;
            this.expressionTerm(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 665;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 663;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new InequalityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 617;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 618;
                    _la = this._input.LA(1);
                    if(!(_la===cqlParser.T__21 || _la===cqlParser.T__22 || _la===cqlParser.T__63 || _la===cqlParser.T__64)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 619;
                    this.expression(9);
                    break;

                case 2:
                    localctx = new TimingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 620;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 621;
                    this.intervalOperatorPhrase();
                    this.state = 622;
                    this.expression(8);
                    break;

                case 3:
                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 624;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 625;
                    _la = this._input.LA(1);
                    if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (cqlParser.T__65 - 66)) | (1 << (cqlParser.T__66 - 66)) | (1 << (cqlParser.T__67 - 66)) | (1 << (cqlParser.T__68 - 66)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 626;
                    this.expression(7);
                    break;

                case 4:
                    localctx = new MembershipExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 627;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 628;
                    _la = this._input.LA(1);
                    if(!(_la===cqlParser.T__37 || _la===cqlParser.T__69)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 630;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
                    if(la_===1) {
                        this.state = 629;
                        this.dateTimePrecisionSpecifier();

                    }
                    this.state = 632;
                    this.expression(6);
                    break;

                case 5:
                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 633;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 634;
                    this.match(cqlParser.T__60);
                    this.state = 635;
                    this.expression(5);
                    break;

                case 6:
                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 636;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 637;
                    _la = this._input.LA(1);
                    if(!(_la===cqlParser.T__70 || _la===cqlParser.T__71)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 638;
                    this.expression(4);
                    break;

                case 7:
                    localctx = new ImpliesExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 639;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 640;
                    this.match(cqlParser.T__72);
                    this.state = 641;
                    this.expression(3);
                    break;

                case 8:
                    localctx = new InFixSetExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 642;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 643;
                    _la = this._input.LA(1);
                    if(!(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (cqlParser.T__73 - 74)) | (1 << (cqlParser.T__74 - 74)) | (1 << (cqlParser.T__75 - 74)) | (1 << (cqlParser.T__76 - 74)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 644;
                    this.expression(2);
                    break;

                case 9:
                    localctx = new BooleanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 645;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 646;
                    this.match(cqlParser.T__50);
                    this.state = 648;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===cqlParser.T__51) {
                        this.state = 647;
                        this.match(cqlParser.T__51);
                    }

                    this.state = 650;
                    _la = this._input.LA(1);
                    if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (cqlParser.T__52 - 53)) | (1 << (cqlParser.T__53 - 53)) | (1 << (cqlParser.T__54 - 53)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 10:
                    localctx = new TypeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 651;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 652;
                    _la = this._input.LA(1);
                    if(!(_la===cqlParser.T__50 || _la===cqlParser.T__55)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 653;
                    this.typeSpecifier();
                    break;

                case 11:
                    localctx = new BetweenExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expression);
                    this.state = 654;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 656;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===cqlParser.T__58) {
                        this.state = 655;
                        this.match(cqlParser.T__58);
                    }

                    this.state = 658;
                    this.match(cqlParser.T__59);
                    this.state = 659;
                    this.expressionTerm(0);
                    this.state = 660;
                    this.match(cqlParser.T__60);
                    this.state = 661;
                    this.expressionTerm(0);
                    break;

                } 
            }
            this.state = 667;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function DateTimePrecisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_dateTimePrecision;
    return this;
}

DateTimePrecisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateTimePrecisionContext.prototype.constructor = DateTimePrecisionContext;


DateTimePrecisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDateTimePrecision(this);
	}
};

DateTimePrecisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDateTimePrecision(this);
	}
};

DateTimePrecisionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDateTimePrecision(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.DateTimePrecisionContext = DateTimePrecisionContext;

cqlParser.prototype.dateTimePrecision = function() {

    var localctx = new DateTimePrecisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, cqlParser.RULE_dateTimePrecision);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        _la = this._input.LA(1);
        if(!(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (cqlParser.T__77 - 78)) | (1 << (cqlParser.T__78 - 78)) | (1 << (cqlParser.T__79 - 78)) | (1 << (cqlParser.T__80 - 78)) | (1 << (cqlParser.T__81 - 78)) | (1 << (cqlParser.T__82 - 78)) | (1 << (cqlParser.T__83 - 78)) | (1 << (cqlParser.T__84 - 78)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DateTimeComponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_dateTimeComponent;
    return this;
}

DateTimeComponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateTimeComponentContext.prototype.constructor = DateTimeComponentContext;

DateTimeComponentContext.prototype.dateTimePrecision = function() {
    return this.getTypedRuleContext(DateTimePrecisionContext,0);
};

DateTimeComponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDateTimeComponent(this);
	}
};

DateTimeComponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDateTimeComponent(this);
	}
};

DateTimeComponentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDateTimeComponent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.DateTimeComponentContext = DateTimeComponentContext;

cqlParser.prototype.dateTimeComponent = function() {

    var localctx = new DateTimeComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, cqlParser.RULE_dateTimeComponent);
    try {
        this.state = 674;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__77:
        case cqlParser.T__78:
        case cqlParser.T__79:
        case cqlParser.T__80:
        case cqlParser.T__81:
        case cqlParser.T__82:
        case cqlParser.T__83:
        case cqlParser.T__84:
            this.enterOuterAlt(localctx, 1);
            this.state = 670;
            this.dateTimePrecision();
            break;
        case cqlParser.T__85:
            this.enterOuterAlt(localctx, 2);
            this.state = 671;
            this.match(cqlParser.T__85);
            break;
        case cqlParser.T__86:
            this.enterOuterAlt(localctx, 3);
            this.state = 672;
            this.match(cqlParser.T__86);
            break;
        case cqlParser.T__87:
            this.enterOuterAlt(localctx, 4);
            this.state = 673;
            this.match(cqlParser.T__87);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PluralDateTimePrecisionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_pluralDateTimePrecision;
    return this;
}

PluralDateTimePrecisionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PluralDateTimePrecisionContext.prototype.constructor = PluralDateTimePrecisionContext;


PluralDateTimePrecisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterPluralDateTimePrecision(this);
	}
};

PluralDateTimePrecisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitPluralDateTimePrecision(this);
	}
};

PluralDateTimePrecisionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitPluralDateTimePrecision(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.PluralDateTimePrecisionContext = PluralDateTimePrecisionContext;

cqlParser.prototype.pluralDateTimePrecision = function() {

    var localctx = new PluralDateTimePrecisionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, cqlParser.RULE_pluralDateTimePrecision);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        _la = this._input.LA(1);
        if(!(((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (cqlParser.T__88 - 89)) | (1 << (cqlParser.T__89 - 89)) | (1 << (cqlParser.T__90 - 89)) | (1 << (cqlParser.T__91 - 89)) | (1 << (cqlParser.T__92 - 89)) | (1 << (cqlParser.T__93 - 89)) | (1 << (cqlParser.T__94 - 89)) | (1 << (cqlParser.T__95 - 89)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_expressionTerm;
    return this;
}

ExpressionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionTermContext.prototype.constructor = ExpressionTermContext;


 
ExpressionTermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AdditionExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditionExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
AdditionExpressionTermContext.prototype.constructor = AdditionExpressionTermContext;

cqlParser.AdditionExpressionTermContext = AdditionExpressionTermContext;

AdditionExpressionTermContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};
AdditionExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterAdditionExpressionTerm(this);
	}
};

AdditionExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitAdditionExpressionTerm(this);
	}
};

AdditionExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitAdditionExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IndexedExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexedExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
IndexedExpressionTermContext.prototype.constructor = IndexedExpressionTermContext;

cqlParser.IndexedExpressionTermContext = IndexedExpressionTermContext;

IndexedExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};

IndexedExpressionTermContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IndexedExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIndexedExpressionTerm(this);
	}
};

IndexedExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIndexedExpressionTerm(this);
	}
};

IndexedExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIndexedExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WidthExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WidthExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
WidthExpressionTermContext.prototype.constructor = WidthExpressionTermContext;

cqlParser.WidthExpressionTermContext = WidthExpressionTermContext;

WidthExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
WidthExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterWidthExpressionTerm(this);
	}
};

WidthExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitWidthExpressionTerm(this);
	}
};

WidthExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitWidthExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetAggregateExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetAggregateExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
SetAggregateExpressionTermContext.prototype.constructor = SetAggregateExpressionTermContext;

cqlParser.SetAggregateExpressionTermContext = SetAggregateExpressionTermContext;

SetAggregateExpressionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetAggregateExpressionTermContext.prototype.dateTimePrecision = function() {
    return this.getTypedRuleContext(DateTimePrecisionContext,0);
};
SetAggregateExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterSetAggregateExpressionTerm(this);
	}
};

SetAggregateExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitSetAggregateExpressionTerm(this);
	}
};

SetAggregateExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitSetAggregateExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TimeUnitExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeUnitExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
TimeUnitExpressionTermContext.prototype.constructor = TimeUnitExpressionTermContext;

cqlParser.TimeUnitExpressionTermContext = TimeUnitExpressionTermContext;

TimeUnitExpressionTermContext.prototype.dateTimeComponent = function() {
    return this.getTypedRuleContext(DateTimeComponentContext,0);
};

TimeUnitExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
TimeUnitExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTimeUnitExpressionTerm(this);
	}
};

TimeUnitExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTimeUnitExpressionTerm(this);
	}
};

TimeUnitExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTimeUnitExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IfThenElseExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfThenElseExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
IfThenElseExpressionTermContext.prototype.constructor = IfThenElseExpressionTermContext;

cqlParser.IfThenElseExpressionTermContext = IfThenElseExpressionTermContext;

IfThenElseExpressionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
IfThenElseExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIfThenElseExpressionTerm(this);
	}
};

IfThenElseExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIfThenElseExpressionTerm(this);
	}
};

IfThenElseExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIfThenElseExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TimeBoundaryExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeBoundaryExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
TimeBoundaryExpressionTermContext.prototype.constructor = TimeBoundaryExpressionTermContext;

cqlParser.TimeBoundaryExpressionTermContext = TimeBoundaryExpressionTermContext;

TimeBoundaryExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
TimeBoundaryExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTimeBoundaryExpressionTerm(this);
	}
};

TimeBoundaryExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTimeBoundaryExpressionTerm(this);
	}
};

TimeBoundaryExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTimeBoundaryExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ElementExtractorExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ElementExtractorExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
ElementExtractorExpressionTermContext.prototype.constructor = ElementExtractorExpressionTermContext;

cqlParser.ElementExtractorExpressionTermContext = ElementExtractorExpressionTermContext;

ElementExtractorExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
ElementExtractorExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterElementExtractorExpressionTerm(this);
	}
};

ElementExtractorExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitElementExtractorExpressionTerm(this);
	}
};

ElementExtractorExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitElementExtractorExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConversionExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConversionExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
ConversionExpressionTermContext.prototype.constructor = ConversionExpressionTermContext;

cqlParser.ConversionExpressionTermContext = ConversionExpressionTermContext;

ConversionExpressionTermContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConversionExpressionTermContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};
ConversionExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterConversionExpressionTerm(this);
	}
};

ConversionExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitConversionExpressionTerm(this);
	}
};

ConversionExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitConversionExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeExtentExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeExtentExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
TypeExtentExpressionTermContext.prototype.constructor = TypeExtentExpressionTermContext;

cqlParser.TypeExtentExpressionTermContext = TypeExtentExpressionTermContext;

TypeExtentExpressionTermContext.prototype.namedTypeSpecifier = function() {
    return this.getTypedRuleContext(NamedTypeSpecifierContext,0);
};
TypeExtentExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTypeExtentExpressionTerm(this);
	}
};

TypeExtentExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTypeExtentExpressionTerm(this);
	}
};

TypeExtentExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTypeExtentExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredecessorExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredecessorExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
PredecessorExpressionTermContext.prototype.constructor = PredecessorExpressionTermContext;

cqlParser.PredecessorExpressionTermContext = PredecessorExpressionTermContext;

PredecessorExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
PredecessorExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterPredecessorExpressionTerm(this);
	}
};

PredecessorExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitPredecessorExpressionTerm(this);
	}
};

PredecessorExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitPredecessorExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PointExtractorExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PointExtractorExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
PointExtractorExpressionTermContext.prototype.constructor = PointExtractorExpressionTermContext;

cqlParser.PointExtractorExpressionTermContext = PointExtractorExpressionTermContext;

PointExtractorExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
PointExtractorExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterPointExtractorExpressionTerm(this);
	}
};

PointExtractorExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitPointExtractorExpressionTerm(this);
	}
};

PointExtractorExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitPointExtractorExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultiplicationExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicationExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
MultiplicationExpressionTermContext.prototype.constructor = MultiplicationExpressionTermContext;

cqlParser.MultiplicationExpressionTermContext = MultiplicationExpressionTermContext;

MultiplicationExpressionTermContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};
MultiplicationExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterMultiplicationExpressionTerm(this);
	}
};

MultiplicationExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitMultiplicationExpressionTerm(this);
	}
};

MultiplicationExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitMultiplicationExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AggregateExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
AggregateExpressionTermContext.prototype.constructor = AggregateExpressionTermContext;

cqlParser.AggregateExpressionTermContext = AggregateExpressionTermContext;

AggregateExpressionTermContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
AggregateExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterAggregateExpressionTerm(this);
	}
};

AggregateExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitAggregateExpressionTerm(this);
	}
};

AggregateExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitAggregateExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DurationExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DurationExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
DurationExpressionTermContext.prototype.constructor = DurationExpressionTermContext;

cqlParser.DurationExpressionTermContext = DurationExpressionTermContext;

DurationExpressionTermContext.prototype.pluralDateTimePrecision = function() {
    return this.getTypedRuleContext(PluralDateTimePrecisionContext,0);
};

DurationExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
DurationExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDurationExpressionTerm(this);
	}
};

DurationExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDurationExpressionTerm(this);
	}
};

DurationExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDurationExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DifferenceExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DifferenceExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
DifferenceExpressionTermContext.prototype.constructor = DifferenceExpressionTermContext;

cqlParser.DifferenceExpressionTermContext = DifferenceExpressionTermContext;

DifferenceExpressionTermContext.prototype.pluralDateTimePrecision = function() {
    return this.getTypedRuleContext(PluralDateTimePrecisionContext,0);
};

DifferenceExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
DifferenceExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDifferenceExpressionTerm(this);
	}
};

DifferenceExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDifferenceExpressionTerm(this);
	}
};

DifferenceExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDifferenceExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CaseExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CaseExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
CaseExpressionTermContext.prototype.constructor = CaseExpressionTermContext;

cqlParser.CaseExpressionTermContext = CaseExpressionTermContext;

CaseExpressionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CaseExpressionTermContext.prototype.caseExpressionItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseExpressionItemContext);
    } else {
        return this.getTypedRuleContext(CaseExpressionItemContext,i);
    }
};
CaseExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCaseExpressionTerm(this);
	}
};

CaseExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCaseExpressionTerm(this);
	}
};

CaseExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCaseExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PowerExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PowerExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
PowerExpressionTermContext.prototype.constructor = PowerExpressionTermContext;

cqlParser.PowerExpressionTermContext = PowerExpressionTermContext;

PowerExpressionTermContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};
PowerExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterPowerExpressionTerm(this);
	}
};

PowerExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitPowerExpressionTerm(this);
	}
};

PowerExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitPowerExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SuccessorExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuccessorExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
SuccessorExpressionTermContext.prototype.constructor = SuccessorExpressionTermContext;

cqlParser.SuccessorExpressionTermContext = SuccessorExpressionTermContext;

SuccessorExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
SuccessorExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterSuccessorExpressionTerm(this);
	}
};

SuccessorExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitSuccessorExpressionTerm(this);
	}
};

SuccessorExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitSuccessorExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PolarityExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PolarityExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
PolarityExpressionTermContext.prototype.constructor = PolarityExpressionTermContext;

cqlParser.PolarityExpressionTermContext = PolarityExpressionTermContext;

PolarityExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};
PolarityExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterPolarityExpressionTerm(this);
	}
};

PolarityExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitPolarityExpressionTerm(this);
	}
};

PolarityExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitPolarityExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TermExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TermExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
TermExpressionTermContext.prototype.constructor = TermExpressionTermContext;

cqlParser.TermExpressionTermContext = TermExpressionTermContext;

TermExpressionTermContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};
TermExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTermExpressionTerm(this);
	}
};

TermExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTermExpressionTerm(this);
	}
};

TermExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTermExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InvocationExpressionTermContext(parser, ctx) {
	ExpressionTermContext.call(this, parser);
    ExpressionTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InvocationExpressionTermContext.prototype = Object.create(ExpressionTermContext.prototype);
InvocationExpressionTermContext.prototype.constructor = InvocationExpressionTermContext;

cqlParser.InvocationExpressionTermContext = InvocationExpressionTermContext;

InvocationExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};

InvocationExpressionTermContext.prototype.invocation = function() {
    return this.getTypedRuleContext(InvocationContext,0);
};
InvocationExpressionTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInvocationExpressionTerm(this);
	}
};

InvocationExpressionTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInvocationExpressionTerm(this);
	}
};

InvocationExpressionTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInvocationExpressionTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};



cqlParser.prototype.expressionTerm = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionTermContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 114;
    this.enterRecursionRule(localctx, 114, cqlParser.RULE_expressionTerm, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 754;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TermExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 679;
            this.term();
            break;

        case 2:
            localctx = new ConversionExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 680;
            this.match(cqlParser.T__96);
            this.state = 681;
            this.expression(0);
            this.state = 682;
            this.match(cqlParser.T__97);
            this.state = 683;
            this.typeSpecifier();
            break;

        case 3:
            localctx = new PolarityExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 685;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__98 || _la===cqlParser.T__99)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 686;
            this.expressionTerm(18);
            break;

        case 4:
            localctx = new TimeBoundaryExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 687;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__100 || _la===cqlParser.T__101)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 688;
            this.match(cqlParser.T__102);
            this.state = 689;
            this.expressionTerm(17);
            break;

        case 5:
            localctx = new TimeUnitExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 690;
            this.dateTimeComponent();
            this.state = 691;
            this.match(cqlParser.T__18);
            this.state = 692;
            this.expressionTerm(16);
            break;

        case 6:
            localctx = new DurationExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 694;
            this.match(cqlParser.T__61);
            this.state = 695;
            this.match(cqlParser.T__37);
            this.state = 696;
            this.pluralDateTimePrecision();
            this.state = 697;
            this.match(cqlParser.T__102);
            this.state = 698;
            this.expressionTerm(15);
            break;

        case 7:
            localctx = new DifferenceExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 700;
            this.match(cqlParser.T__62);
            this.state = 701;
            this.match(cqlParser.T__37);
            this.state = 702;
            this.pluralDateTimePrecision();
            this.state = 703;
            this.match(cqlParser.T__102);
            this.state = 704;
            this.expressionTerm(14);
            break;

        case 8:
            localctx = new WidthExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 706;
            this.match(cqlParser.T__103);
            this.state = 707;
            this.match(cqlParser.T__102);
            this.state = 708;
            this.expressionTerm(13);
            break;

        case 9:
            localctx = new SuccessorExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 709;
            this.match(cqlParser.T__104);
            this.state = 710;
            this.match(cqlParser.T__102);
            this.state = 711;
            this.expressionTerm(12);
            break;

        case 10:
            localctx = new PredecessorExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 712;
            this.match(cqlParser.T__105);
            this.state = 713;
            this.match(cqlParser.T__102);
            this.state = 714;
            this.expressionTerm(11);
            break;

        case 11:
            localctx = new ElementExtractorExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 715;
            this.match(cqlParser.T__106);
            this.state = 716;
            this.match(cqlParser.T__18);
            this.state = 717;
            this.expressionTerm(10);
            break;

        case 12:
            localctx = new PointExtractorExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 718;
            this.match(cqlParser.T__107);
            this.state = 719;
            this.match(cqlParser.T__18);
            this.state = 720;
            this.expressionTerm(9);
            break;

        case 13:
            localctx = new TypeExtentExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 721;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__108 || _la===cqlParser.T__109)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 722;
            this.namedTypeSpecifier();
            break;

        case 14:
            localctx = new IfThenElseExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 723;
            this.match(cqlParser.T__116);
            this.state = 724;
            this.expression(0);
            this.state = 725;
            this.match(cqlParser.T__117);
            this.state = 726;
            this.expression(0);
            this.state = 727;
            this.match(cqlParser.T__118);
            this.state = 728;
            this.expression(0);
            break;

        case 15:
            localctx = new CaseExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 730;
            this.match(cqlParser.T__119);
            this.state = 732;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__29))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (cqlParser.T__36 - 37)) | (1 << (cqlParser.T__43 - 37)) | (1 << (cqlParser.T__51 - 37)) | (1 << (cqlParser.T__52 - 37)) | (1 << (cqlParser.T__53 - 37)) | (1 << (cqlParser.T__54 - 37)) | (1 << (cqlParser.T__56 - 37)) | (1 << (cqlParser.T__57 - 37)) | (1 << (cqlParser.T__61 - 37)) | (1 << (cqlParser.T__62 - 37)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (cqlParser.T__77 - 78)) | (1 << (cqlParser.T__78 - 78)) | (1 << (cqlParser.T__79 - 78)) | (1 << (cqlParser.T__80 - 78)) | (1 << (cqlParser.T__81 - 78)) | (1 << (cqlParser.T__82 - 78)) | (1 << (cqlParser.T__83 - 78)) | (1 << (cqlParser.T__84 - 78)) | (1 << (cqlParser.T__85 - 78)) | (1 << (cqlParser.T__86 - 78)) | (1 << (cqlParser.T__87 - 78)) | (1 << (cqlParser.T__88 - 78)) | (1 << (cqlParser.T__89 - 78)) | (1 << (cqlParser.T__90 - 78)) | (1 << (cqlParser.T__91 - 78)) | (1 << (cqlParser.T__92 - 78)) | (1 << (cqlParser.T__93 - 78)) | (1 << (cqlParser.T__94 - 78)) | (1 << (cqlParser.T__95 - 78)) | (1 << (cqlParser.T__96 - 78)) | (1 << (cqlParser.T__98 - 78)) | (1 << (cqlParser.T__99 - 78)) | (1 << (cqlParser.T__100 - 78)) | (1 << (cqlParser.T__101 - 78)) | (1 << (cqlParser.T__103 - 78)) | (1 << (cqlParser.T__104 - 78)) | (1 << (cqlParser.T__105 - 78)) | (1 << (cqlParser.T__106 - 78)) | (1 << (cqlParser.T__107 - 78)) | (1 << (cqlParser.T__108 - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (cqlParser.T__109 - 110)) | (1 << (cqlParser.T__116 - 110)) | (1 << (cqlParser.T__119 - 110)) | (1 << (cqlParser.T__120 - 110)) | (1 << (cqlParser.T__121 - 110)) | (1 << (cqlParser.T__122 - 110)))) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (cqlParser.T__145 - 146)) | (1 << (cqlParser.T__146 - 146)) | (1 << (cqlParser.T__147 - 146)) | (1 << (cqlParser.T__148 - 146)) | (1 << (cqlParser.T__149 - 146)) | (1 << (cqlParser.T__150 - 146)) | (1 << (cqlParser.T__151 - 146)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 146)) | (1 << (cqlParser.DATETIME - 146)) | (1 << (cqlParser.TIME - 146)) | (1 << (cqlParser.IDENTIFIER - 146)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 146)) | (1 << (cqlParser.STRING - 146)) | (1 << (cqlParser.NUMBER - 146)))) !== 0)) {
                this.state = 731;
                this.expression(0);
            }

            this.state = 735; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 734;
                this.caseExpressionItem();
                this.state = 737; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===cqlParser.T__124);
            this.state = 739;
            this.match(cqlParser.T__118);
            this.state = 740;
            this.expression(0);
            this.state = 741;
            this.match(cqlParser.T__101);
            break;

        case 16:
            localctx = new AggregateExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 743;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__43 || _la===cqlParser.T__120)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 744;
            this.expression(0);
            break;

        case 17:
            localctx = new SetAggregateExpressionTermContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 745;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__121 || _la===cqlParser.T__122)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 746;
            this.expression(0);
            this.state = 752;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
            if(la_===1) {
                this.state = 747;
                this.match(cqlParser.T__123);
                this.state = 750;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 748;
                    this.dateTimePrecision();
                    break;

                case 2:
                    this.state = 749;
                    this.expression(0);
                    break;

                }

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 775;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 773;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PowerExpressionTermContext(this, new ExpressionTermContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expressionTerm);
                    this.state = 756;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 757;
                    this.match(cqlParser.T__110);
                    this.state = 758;
                    this.expressionTerm(8);
                    break;

                case 2:
                    localctx = new MultiplicationExpressionTermContext(this, new ExpressionTermContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expressionTerm);
                    this.state = 759;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 760;
                    _la = this._input.LA(1);
                    if(!(((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (cqlParser.T__111 - 112)) | (1 << (cqlParser.T__112 - 112)) | (1 << (cqlParser.T__113 - 112)) | (1 << (cqlParser.T__114 - 112)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 761;
                    this.expressionTerm(7);
                    break;

                case 3:
                    localctx = new AdditionExpressionTermContext(this, new ExpressionTermContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expressionTerm);
                    this.state = 762;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 763;
                    _la = this._input.LA(1);
                    if(!(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (cqlParser.T__98 - 99)) | (1 << (cqlParser.T__99 - 99)) | (1 << (cqlParser.T__115 - 99)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 764;
                    this.expressionTerm(6);
                    break;

                case 4:
                    localctx = new InvocationExpressionTermContext(this, new ExpressionTermContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expressionTerm);
                    this.state = 765;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 766;
                    this.match(cqlParser.T__16);
                    this.state = 767;
                    this.invocation();
                    break;

                case 5:
                    localctx = new IndexedExpressionTermContext(this, new ExpressionTermContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, cqlParser.RULE_expressionTerm);
                    this.state = 768;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 769;
                    this.match(cqlParser.T__36);
                    this.state = 770;
                    this.expression(0);
                    this.state = 771;
                    this.match(cqlParser.T__38);
                    break;

                } 
            }
            this.state = 777;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function CaseExpressionItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_caseExpressionItem;
    return this;
}

CaseExpressionItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseExpressionItemContext.prototype.constructor = CaseExpressionItemContext;

CaseExpressionItemContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

CaseExpressionItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCaseExpressionItem(this);
	}
};

CaseExpressionItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCaseExpressionItem(this);
	}
};

CaseExpressionItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCaseExpressionItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CaseExpressionItemContext = CaseExpressionItemContext;

cqlParser.prototype.caseExpressionItem = function() {

    var localctx = new CaseExpressionItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, cqlParser.RULE_caseExpressionItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 778;
        this.match(cqlParser.T__124);
        this.state = 779;
        this.expression(0);
        this.state = 780;
        this.match(cqlParser.T__117);
        this.state = 781;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DateTimePrecisionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_dateTimePrecisionSpecifier;
    return this;
}

DateTimePrecisionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateTimePrecisionSpecifierContext.prototype.constructor = DateTimePrecisionSpecifierContext;

DateTimePrecisionSpecifierContext.prototype.dateTimePrecision = function() {
    return this.getTypedRuleContext(DateTimePrecisionContext,0);
};

DateTimePrecisionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDateTimePrecisionSpecifier(this);
	}
};

DateTimePrecisionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDateTimePrecisionSpecifier(this);
	}
};

DateTimePrecisionSpecifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDateTimePrecisionSpecifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.DateTimePrecisionSpecifierContext = DateTimePrecisionSpecifierContext;

cqlParser.prototype.dateTimePrecisionSpecifier = function() {

    var localctx = new DateTimePrecisionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, cqlParser.RULE_dateTimePrecisionSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 783;
        this.dateTimePrecision();
        this.state = 784;
        this.match(cqlParser.T__102);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelativeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_relativeQualifier;
    return this;
}

RelativeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelativeQualifierContext.prototype.constructor = RelativeQualifierContext;


RelativeQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterRelativeQualifier(this);
	}
};

RelativeQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitRelativeQualifier(this);
	}
};

RelativeQualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitRelativeQualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.RelativeQualifierContext = RelativeQualifierContext;

cqlParser.prototype.relativeQualifier = function() {

    var localctx = new RelativeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, cqlParser.RULE_relativeQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        _la = this._input.LA(1);
        if(!(_la===cqlParser.T__125 || _la===cqlParser.T__126)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OffsetRelativeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_offsetRelativeQualifier;
    return this;
}

OffsetRelativeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OffsetRelativeQualifierContext.prototype.constructor = OffsetRelativeQualifierContext;


OffsetRelativeQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterOffsetRelativeQualifier(this);
	}
};

OffsetRelativeQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitOffsetRelativeQualifier(this);
	}
};

OffsetRelativeQualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitOffsetRelativeQualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.OffsetRelativeQualifierContext = OffsetRelativeQualifierContext;

cqlParser.prototype.offsetRelativeQualifier = function() {

    var localctx = new OffsetRelativeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, cqlParser.RULE_offsetRelativeQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        _la = this._input.LA(1);
        if(!(_la===cqlParser.T__127 || _la===cqlParser.T__128)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExclusiveRelativeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_exclusiveRelativeQualifier;
    return this;
}

ExclusiveRelativeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveRelativeQualifierContext.prototype.constructor = ExclusiveRelativeQualifierContext;


ExclusiveRelativeQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterExclusiveRelativeQualifier(this);
	}
};

ExclusiveRelativeQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitExclusiveRelativeQualifier(this);
	}
};

ExclusiveRelativeQualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitExclusiveRelativeQualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ExclusiveRelativeQualifierContext = ExclusiveRelativeQualifierContext;

cqlParser.prototype.exclusiveRelativeQualifier = function() {

    var localctx = new ExclusiveRelativeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, cqlParser.RULE_exclusiveRelativeQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 790;
        _la = this._input.LA(1);
        if(!(_la===cqlParser.T__129 || _la===cqlParser.T__130)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuantityOffsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_quantityOffset;
    return this;
}

QuantityOffsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuantityOffsetContext.prototype.constructor = QuantityOffsetContext;

QuantityOffsetContext.prototype.quantity = function() {
    return this.getTypedRuleContext(QuantityContext,0);
};

QuantityOffsetContext.prototype.offsetRelativeQualifier = function() {
    return this.getTypedRuleContext(OffsetRelativeQualifierContext,0);
};

QuantityOffsetContext.prototype.exclusiveRelativeQualifier = function() {
    return this.getTypedRuleContext(ExclusiveRelativeQualifierContext,0);
};

QuantityOffsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQuantityOffset(this);
	}
};

QuantityOffsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQuantityOffset(this);
	}
};

QuantityOffsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQuantityOffset(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QuantityOffsetContext = QuantityOffsetContext;

cqlParser.prototype.quantityOffset = function() {

    var localctx = new QuantityOffsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, cqlParser.RULE_quantityOffset);
    var _la = 0; // Token type
    try {
        this.state = 799;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 792;
            this.quantity();
            this.state = 794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__127 || _la===cqlParser.T__128) {
                this.state = 793;
                this.offsetRelativeQualifier();
            }

            break;
        case cqlParser.T__129:
        case cqlParser.T__130:
            this.enterOuterAlt(localctx, 2);
            this.state = 796;
            this.exclusiveRelativeQualifier();
            this.state = 797;
            this.quantity();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TemporalRelationshipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_temporalRelationship;
    return this;
}

TemporalRelationshipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TemporalRelationshipContext.prototype.constructor = TemporalRelationshipContext;


TemporalRelationshipContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTemporalRelationship(this);
	}
};

TemporalRelationshipContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTemporalRelationship(this);
	}
};

TemporalRelationshipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTemporalRelationship(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TemporalRelationshipContext = TemporalRelationshipContext;

cqlParser.prototype.temporalRelationship = function() {

    var localctx = new TemporalRelationshipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, cqlParser.RULE_temporalRelationship);
    var _la = 0; // Token type
    try {
        this.state = 809;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__131) {
                this.state = 801;
                this.match(cqlParser.T__131);
            }

            this.state = 804;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__132 || _la===cqlParser.T__133)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 805;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__132 || _la===cqlParser.T__133)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__134) {
                this.state = 806;
                this.match(cqlParser.T__134);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalOperatorPhraseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_intervalOperatorPhrase;
    return this;
}

IntervalOperatorPhraseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalOperatorPhraseContext.prototype.constructor = IntervalOperatorPhraseContext;


 
IntervalOperatorPhraseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WithinIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WithinIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
WithinIntervalOperatorPhraseContext.prototype.constructor = WithinIntervalOperatorPhraseContext;

cqlParser.WithinIntervalOperatorPhraseContext = WithinIntervalOperatorPhraseContext;

WithinIntervalOperatorPhraseContext.prototype.quantity = function() {
    return this.getTypedRuleContext(QuantityContext,0);
};
WithinIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterWithinIntervalOperatorPhrase(this);
	}
};

WithinIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitWithinIntervalOperatorPhrase(this);
	}
};

WithinIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitWithinIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IncludedInIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IncludedInIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
IncludedInIntervalOperatorPhraseContext.prototype.constructor = IncludedInIntervalOperatorPhraseContext;

cqlParser.IncludedInIntervalOperatorPhraseContext = IncludedInIntervalOperatorPhraseContext;

IncludedInIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
IncludedInIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIncludedInIntervalOperatorPhrase(this);
	}
};

IncludedInIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIncludedInIntervalOperatorPhrase(this);
	}
};

IncludedInIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIncludedInIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EndsIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EndsIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
EndsIntervalOperatorPhraseContext.prototype.constructor = EndsIntervalOperatorPhraseContext;

cqlParser.EndsIntervalOperatorPhraseContext = EndsIntervalOperatorPhraseContext;

EndsIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
EndsIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterEndsIntervalOperatorPhrase(this);
	}
};

EndsIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitEndsIntervalOperatorPhrase(this);
	}
};

EndsIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitEndsIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConcurrentWithIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcurrentWithIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
ConcurrentWithIntervalOperatorPhraseContext.prototype.constructor = ConcurrentWithIntervalOperatorPhraseContext;

cqlParser.ConcurrentWithIntervalOperatorPhraseContext = ConcurrentWithIntervalOperatorPhraseContext;

ConcurrentWithIntervalOperatorPhraseContext.prototype.relativeQualifier = function() {
    return this.getTypedRuleContext(RelativeQualifierContext,0);
};

ConcurrentWithIntervalOperatorPhraseContext.prototype.dateTimePrecision = function() {
    return this.getTypedRuleContext(DateTimePrecisionContext,0);
};
ConcurrentWithIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterConcurrentWithIntervalOperatorPhrase(this);
	}
};

ConcurrentWithIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitConcurrentWithIntervalOperatorPhrase(this);
	}
};

ConcurrentWithIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitConcurrentWithIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OverlapsIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OverlapsIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
OverlapsIntervalOperatorPhraseContext.prototype.constructor = OverlapsIntervalOperatorPhraseContext;

cqlParser.OverlapsIntervalOperatorPhraseContext = OverlapsIntervalOperatorPhraseContext;

OverlapsIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
OverlapsIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterOverlapsIntervalOperatorPhrase(this);
	}
};

OverlapsIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitOverlapsIntervalOperatorPhrase(this);
	}
};

OverlapsIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitOverlapsIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IncludesIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IncludesIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
IncludesIntervalOperatorPhraseContext.prototype.constructor = IncludesIntervalOperatorPhraseContext;

cqlParser.IncludesIntervalOperatorPhraseContext = IncludesIntervalOperatorPhraseContext;

IncludesIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
IncludesIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIncludesIntervalOperatorPhrase(this);
	}
};

IncludesIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIncludesIntervalOperatorPhrase(this);
	}
};

IncludesIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIncludesIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BeforeOrAfterIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BeforeOrAfterIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
BeforeOrAfterIntervalOperatorPhraseContext.prototype.constructor = BeforeOrAfterIntervalOperatorPhraseContext;

cqlParser.BeforeOrAfterIntervalOperatorPhraseContext = BeforeOrAfterIntervalOperatorPhraseContext;

BeforeOrAfterIntervalOperatorPhraseContext.prototype.temporalRelationship = function() {
    return this.getTypedRuleContext(TemporalRelationshipContext,0);
};

BeforeOrAfterIntervalOperatorPhraseContext.prototype.quantityOffset = function() {
    return this.getTypedRuleContext(QuantityOffsetContext,0);
};

BeforeOrAfterIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
BeforeOrAfterIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterBeforeOrAfterIntervalOperatorPhrase(this);
	}
};

BeforeOrAfterIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitBeforeOrAfterIntervalOperatorPhrase(this);
	}
};

BeforeOrAfterIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitBeforeOrAfterIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MeetsIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MeetsIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
MeetsIntervalOperatorPhraseContext.prototype.constructor = MeetsIntervalOperatorPhraseContext;

cqlParser.MeetsIntervalOperatorPhraseContext = MeetsIntervalOperatorPhraseContext;

MeetsIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
MeetsIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterMeetsIntervalOperatorPhrase(this);
	}
};

MeetsIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitMeetsIntervalOperatorPhrase(this);
	}
};

MeetsIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitMeetsIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StartsIntervalOperatorPhraseContext(parser, ctx) {
	IntervalOperatorPhraseContext.call(this, parser);
    IntervalOperatorPhraseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StartsIntervalOperatorPhraseContext.prototype = Object.create(IntervalOperatorPhraseContext.prototype);
StartsIntervalOperatorPhraseContext.prototype.constructor = StartsIntervalOperatorPhraseContext;

cqlParser.StartsIntervalOperatorPhraseContext = StartsIntervalOperatorPhraseContext;

StartsIntervalOperatorPhraseContext.prototype.dateTimePrecisionSpecifier = function() {
    return this.getTypedRuleContext(DateTimePrecisionSpecifierContext,0);
};
StartsIntervalOperatorPhraseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterStartsIntervalOperatorPhrase(this);
	}
};

StartsIntervalOperatorPhraseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitStartsIntervalOperatorPhrase(this);
	}
};

StartsIntervalOperatorPhraseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitStartsIntervalOperatorPhrase(this);
    } else {
        return visitor.visitChildren(this);
    }
};



cqlParser.IntervalOperatorPhraseContext = IntervalOperatorPhraseContext;

cqlParser.prototype.intervalOperatorPhrase = function() {

    var localctx = new IntervalOperatorPhraseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, cqlParser.RULE_intervalOperatorPhrase);
    var _la = 0; // Token type
    try {
        this.state = 892;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConcurrentWithIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0)) {
                this.state = 811;
                _la = this._input.LA(1);
                if(!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 814;
            this.match(cqlParser.T__138);
            this.state = 816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (cqlParser.T__77 - 78)) | (1 << (cqlParser.T__78 - 78)) | (1 << (cqlParser.T__79 - 78)) | (1 << (cqlParser.T__80 - 78)) | (1 << (cqlParser.T__81 - 78)) | (1 << (cqlParser.T__82 - 78)) | (1 << (cqlParser.T__83 - 78)) | (1 << (cqlParser.T__84 - 78)))) !== 0)) {
                this.state = 815;
                this.dateTimePrecision();
            }

            this.state = 820;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case cqlParser.T__125:
            case cqlParser.T__126:
                this.state = 818;
                this.relativeQualifier();
                break;
            case cqlParser.T__55:
                this.state = 819;
                this.match(cqlParser.T__55);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 823;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
            if(la_===1) {
                this.state = 822;
                _la = this._input.LA(1);
                if(!(_la===cqlParser.T__100 || _la===cqlParser.T__101)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 2:
            localctx = new IncludesIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__58) {
                this.state = 825;
                this.match(cqlParser.T__58);
            }

            this.state = 828;
            this.match(cqlParser.T__139);
            this.state = 830;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 829;
                this.dateTimePrecisionSpecifier();

            }
            this.state = 833;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 832;
                _la = this._input.LA(1);
                if(!(_la===cqlParser.T__100 || _la===cqlParser.T__101)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 3:
            localctx = new IncludedInIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 836;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0)) {
                this.state = 835;
                _la = this._input.LA(1);
                if(!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__58) {
                this.state = 838;
                this.match(cqlParser.T__58);
            }

            this.state = 841;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__140 || _la===cqlParser.T__141)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 843;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 842;
                this.dateTimePrecisionSpecifier();

            }
            break;

        case 4:
            localctx = new BeforeOrAfterIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0)) {
                this.state = 845;
                _la = this._input.LA(1);
                if(!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (cqlParser.T__129 - 130)) | (1 << (cqlParser.T__130 - 130)) | (1 << (cqlParser.NUMBER - 130)))) !== 0)) {
                this.state = 848;
                this.quantityOffset();
            }

            this.state = 851;
            this.temporalRelationship();
            this.state = 853;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 852;
                this.dateTimePrecisionSpecifier();

            }
            this.state = 856;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 855;
                _la = this._input.LA(1);
                if(!(_la===cqlParser.T__100 || _la===cqlParser.T__101)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 5:
            localctx = new WithinIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0)) {
                this.state = 858;
                _la = this._input.LA(1);
                if(!(((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (cqlParser.T__135 - 136)) | (1 << (cqlParser.T__136 - 136)) | (1 << (cqlParser.T__137 - 136)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 862;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__58) {
                this.state = 861;
                this.match(cqlParser.T__58);
            }

            this.state = 864;
            this.match(cqlParser.T__142);
            this.state = 865;
            this.quantity();
            this.state = 866;
            this.match(cqlParser.T__102);
            this.state = 868;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 867;
                _la = this._input.LA(1);
                if(!(_la===cqlParser.T__100 || _la===cqlParser.T__101)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 6:
            localctx = new MeetsIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 870;
            this.match(cqlParser.T__143);
            this.state = 872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__132 || _la===cqlParser.T__133) {
                this.state = 871;
                _la = this._input.LA(1);
                if(!(_la===cqlParser.T__132 || _la===cqlParser.T__133)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 875;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 874;
                this.dateTimePrecisionSpecifier();

            }
            break;

        case 7:
            localctx = new OverlapsIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 877;
            this.match(cqlParser.T__144);
            this.state = 879;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__132 || _la===cqlParser.T__133) {
                this.state = 878;
                _la = this._input.LA(1);
                if(!(_la===cqlParser.T__132 || _la===cqlParser.T__133)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 882;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 881;
                this.dateTimePrecisionSpecifier();

            }
            break;

        case 8:
            localctx = new StartsIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 884;
            this.match(cqlParser.T__135);
            this.state = 886;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
            if(la_===1) {
                this.state = 885;
                this.dateTimePrecisionSpecifier();

            }
            break;

        case 9:
            localctx = new EndsIntervalOperatorPhraseContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 888;
            this.match(cqlParser.T__136);
            this.state = 890;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 889;
                this.dateTimePrecisionSpecifier();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;


 
TermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExternalConstantTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExternalConstantTermContext.prototype = Object.create(TermContext.prototype);
ExternalConstantTermContext.prototype.constructor = ExternalConstantTermContext;

cqlParser.ExternalConstantTermContext = ExternalConstantTermContext;

ExternalConstantTermContext.prototype.externalConstant = function() {
    return this.getTypedRuleContext(ExternalConstantContext,0);
};
ExternalConstantTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterExternalConstantTerm(this);
	}
};

ExternalConstantTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitExternalConstantTerm(this);
	}
};

ExternalConstantTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitExternalConstantTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TupleSelectorTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TupleSelectorTermContext.prototype = Object.create(TermContext.prototype);
TupleSelectorTermContext.prototype.constructor = TupleSelectorTermContext;

cqlParser.TupleSelectorTermContext = TupleSelectorTermContext;

TupleSelectorTermContext.prototype.tupleSelector = function() {
    return this.getTypedRuleContext(TupleSelectorContext,0);
};
TupleSelectorTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTupleSelectorTerm(this);
	}
};

TupleSelectorTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTupleSelectorTerm(this);
	}
};

TupleSelectorTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTupleSelectorTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiteralTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralTermContext.prototype = Object.create(TermContext.prototype);
LiteralTermContext.prototype.constructor = LiteralTermContext;

cqlParser.LiteralTermContext = LiteralTermContext;

LiteralTermContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterLiteralTerm(this);
	}
};

LiteralTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitLiteralTerm(this);
	}
};

LiteralTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitLiteralTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConceptSelectorTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConceptSelectorTermContext.prototype = Object.create(TermContext.prototype);
ConceptSelectorTermContext.prototype.constructor = ConceptSelectorTermContext;

cqlParser.ConceptSelectorTermContext = ConceptSelectorTermContext;

ConceptSelectorTermContext.prototype.conceptSelector = function() {
    return this.getTypedRuleContext(ConceptSelectorContext,0);
};
ConceptSelectorTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterConceptSelectorTerm(this);
	}
};

ConceptSelectorTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitConceptSelectorTerm(this);
	}
};

ConceptSelectorTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitConceptSelectorTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedTermContext.prototype = Object.create(TermContext.prototype);
ParenthesizedTermContext.prototype.constructor = ParenthesizedTermContext;

cqlParser.ParenthesizedTermContext = ParenthesizedTermContext;

ParenthesizedTermContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenthesizedTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterParenthesizedTerm(this);
	}
};

ParenthesizedTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitParenthesizedTerm(this);
	}
};

ParenthesizedTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitParenthesizedTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CodeSelectorTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CodeSelectorTermContext.prototype = Object.create(TermContext.prototype);
CodeSelectorTermContext.prototype.constructor = CodeSelectorTermContext;

cqlParser.CodeSelectorTermContext = CodeSelectorTermContext;

CodeSelectorTermContext.prototype.codeSelector = function() {
    return this.getTypedRuleContext(CodeSelectorContext,0);
};
CodeSelectorTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodeSelectorTerm(this);
	}
};

CodeSelectorTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodeSelectorTerm(this);
	}
};

CodeSelectorTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodeSelectorTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InvocationTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InvocationTermContext.prototype = Object.create(TermContext.prototype);
InvocationTermContext.prototype.constructor = InvocationTermContext;

cqlParser.InvocationTermContext = InvocationTermContext;

InvocationTermContext.prototype.invocation = function() {
    return this.getTypedRuleContext(InvocationContext,0);
};
InvocationTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInvocationTerm(this);
	}
};

InvocationTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInvocationTerm(this);
	}
};

InvocationTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInvocationTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InstanceSelectorTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceSelectorTermContext.prototype = Object.create(TermContext.prototype);
InstanceSelectorTermContext.prototype.constructor = InstanceSelectorTermContext;

cqlParser.InstanceSelectorTermContext = InstanceSelectorTermContext;

InstanceSelectorTermContext.prototype.instanceSelector = function() {
    return this.getTypedRuleContext(InstanceSelectorContext,0);
};
InstanceSelectorTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInstanceSelectorTerm(this);
	}
};

InstanceSelectorTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInstanceSelectorTerm(this);
	}
};

InstanceSelectorTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInstanceSelectorTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntervalSelectorTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalSelectorTermContext.prototype = Object.create(TermContext.prototype);
IntervalSelectorTermContext.prototype.constructor = IntervalSelectorTermContext;

cqlParser.IntervalSelectorTermContext = IntervalSelectorTermContext;

IntervalSelectorTermContext.prototype.intervalSelector = function() {
    return this.getTypedRuleContext(IntervalSelectorContext,0);
};
IntervalSelectorTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIntervalSelectorTerm(this);
	}
};

IntervalSelectorTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIntervalSelectorTerm(this);
	}
};

IntervalSelectorTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIntervalSelectorTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ListSelectorTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListSelectorTermContext.prototype = Object.create(TermContext.prototype);
ListSelectorTermContext.prototype.constructor = ListSelectorTermContext;

cqlParser.ListSelectorTermContext = ListSelectorTermContext;

ListSelectorTermContext.prototype.listSelector = function() {
    return this.getTypedRuleContext(ListSelectorContext,0);
};
ListSelectorTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterListSelectorTerm(this);
	}
};

ListSelectorTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitListSelectorTerm(this);
	}
};

ListSelectorTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitListSelectorTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};



cqlParser.TermContext = TermContext;

cqlParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, cqlParser.RULE_term);
    try {
        this.state = 907;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InvocationTermContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 894;
            this.invocation();
            break;

        case 2:
            localctx = new LiteralTermContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 895;
            this.literal();
            break;

        case 3:
            localctx = new ExternalConstantTermContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 896;
            this.externalConstant();
            break;

        case 4:
            localctx = new IntervalSelectorTermContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 897;
            this.intervalSelector();
            break;

        case 5:
            localctx = new TupleSelectorTermContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 898;
            this.tupleSelector();
            break;

        case 6:
            localctx = new InstanceSelectorTermContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 899;
            this.instanceSelector();
            break;

        case 7:
            localctx = new ListSelectorTermContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 900;
            this.listSelector();
            break;

        case 8:
            localctx = new CodeSelectorTermContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 901;
            this.codeSelector();
            break;

        case 9:
            localctx = new ConceptSelectorTermContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 902;
            this.conceptSelector();
            break;

        case 10:
            localctx = new ParenthesizedTermContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 903;
            this.match(cqlParser.T__29);
            this.state = 904;
            this.expression(0);
            this.state = 905;
            this.match(cqlParser.T__30);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RatioContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_ratio;
    return this;
}

RatioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RatioContext.prototype.constructor = RatioContext;

RatioContext.prototype.quantity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QuantityContext);
    } else {
        return this.getTypedRuleContext(QuantityContext,i);
    }
};

RatioContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterRatio(this);
	}
};

RatioContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitRatio(this);
	}
};

RatioContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitRatio(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.RatioContext = RatioContext;

cqlParser.prototype.ratio = function() {

    var localctx = new RatioContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, cqlParser.RULE_ratio);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 909;
        this.quantity();
        this.state = 910;
        this.match(cqlParser.T__10);
        this.state = 911;
        this.quantity();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;


 
LiteralContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TimeLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeLiteralContext.prototype = Object.create(LiteralContext.prototype);
TimeLiteralContext.prototype.constructor = TimeLiteralContext;

cqlParser.TimeLiteralContext = TimeLiteralContext;

TimeLiteralContext.prototype.TIME = function() {
    return this.getToken(cqlParser.TIME, 0);
};
TimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTimeLiteral(this);
	}
};

TimeLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTimeLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NullLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(LiteralContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

cqlParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitNullLiteral(this);
	}
};

NullLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitNullLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RatioLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RatioLiteralContext.prototype = Object.create(LiteralContext.prototype);
RatioLiteralContext.prototype.constructor = RatioLiteralContext;

cqlParser.RatioLiteralContext = RatioLiteralContext;

RatioLiteralContext.prototype.ratio = function() {
    return this.getTypedRuleContext(RatioContext,0);
};
RatioLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterRatioLiteral(this);
	}
};

RatioLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitRatioLiteral(this);
	}
};

RatioLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitRatioLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DateTimeLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DateTimeLiteralContext.prototype = Object.create(LiteralContext.prototype);
DateTimeLiteralContext.prototype.constructor = DateTimeLiteralContext;

cqlParser.DateTimeLiteralContext = DateTimeLiteralContext;

DateTimeLiteralContext.prototype.DATETIME = function() {
    return this.getToken(cqlParser.DATETIME, 0);
};
DateTimeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDateTimeLiteral(this);
	}
};

DateTimeLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDateTimeLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StringLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(LiteralContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

cqlParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};
StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(LiteralContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

cqlParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumberLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumberLiteralContext.prototype = Object.create(LiteralContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

cqlParser.NumberLiteralContext = NumberLiteralContext;

NumberLiteralContext.prototype.NUMBER = function() {
    return this.getToken(cqlParser.NUMBER, 0);
};
NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitNumberLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QuantityLiteralContext(parser, ctx) {
	LiteralContext.call(this, parser);
    LiteralContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuantityLiteralContext.prototype = Object.create(LiteralContext.prototype);
QuantityLiteralContext.prototype.constructor = QuantityLiteralContext;

cqlParser.QuantityLiteralContext = QuantityLiteralContext;

QuantityLiteralContext.prototype.quantity = function() {
    return this.getTypedRuleContext(QuantityContext,0);
};
QuantityLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQuantityLiteral(this);
	}
};

QuantityLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQuantityLiteral(this);
	}
};

QuantityLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQuantityLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};



cqlParser.LiteralContext = LiteralContext;

cqlParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, cqlParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.state = 921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            localctx = new BooleanLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 913;
            _la = this._input.LA(1);
            if(!(_la===cqlParser.T__53 || _la===cqlParser.T__54)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            localctx = new NullLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 914;
            this.match(cqlParser.T__52);
            break;

        case 3:
            localctx = new StringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 915;
            this.match(cqlParser.STRING);
            break;

        case 4:
            localctx = new NumberLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 916;
            this.match(cqlParser.NUMBER);
            break;

        case 5:
            localctx = new DateTimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 917;
            this.match(cqlParser.DATETIME);
            break;

        case 6:
            localctx = new TimeLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 918;
            this.match(cqlParser.TIME);
            break;

        case 7:
            localctx = new QuantityLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 919;
            this.quantity();
            break;

        case 8:
            localctx = new RatioLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 920;
            this.ratio();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_intervalSelector;
    return this;
}

IntervalSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalSelectorContext.prototype.constructor = IntervalSelectorContext;

IntervalSelectorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

IntervalSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIntervalSelector(this);
	}
};

IntervalSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIntervalSelector(this);
	}
};

IntervalSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIntervalSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.IntervalSelectorContext = IntervalSelectorContext;

cqlParser.prototype.intervalSelector = function() {

    var localctx = new IntervalSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, cqlParser.RULE_intervalSelector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.match(cqlParser.T__23);
        this.state = 924;
        _la = this._input.LA(1);
        if(!(_la===cqlParser.T__29 || _la===cqlParser.T__36)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 925;
        this.expression(0);
        this.state = 926;
        this.match(cqlParser.T__14);
        this.state = 927;
        this.expression(0);
        this.state = 928;
        _la = this._input.LA(1);
        if(!(_la===cqlParser.T__30 || _la===cqlParser.T__38)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_tupleSelector;
    return this;
}

TupleSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleSelectorContext.prototype.constructor = TupleSelectorContext;

TupleSelectorContext.prototype.tupleElementSelector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TupleElementSelectorContext);
    } else {
        return this.getTypedRuleContext(TupleElementSelectorContext,i);
    }
};

TupleSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTupleSelector(this);
	}
};

TupleSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTupleSelector(this);
	}
};

TupleSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTupleSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TupleSelectorContext = TupleSelectorContext;

cqlParser.prototype.tupleSelector = function() {

    var localctx = new TupleSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, cqlParser.RULE_tupleSelector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__24) {
            this.state = 930;
            this.match(cqlParser.T__24);
        }

        this.state = 933;
        this.match(cqlParser.T__13);
        this.state = 943;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__10:
            this.state = 934;
            this.match(cqlParser.T__10);
            break;
        case cqlParser.T__1:
        case cqlParser.T__17:
        case cqlParser.T__19:
        case cqlParser.T__85:
        case cqlParser.T__86:
        case cqlParser.T__87:
        case cqlParser.T__100:
        case cqlParser.T__101:
        case cqlParser.T__145:
        case cqlParser.T__146:
        case cqlParser.T__147:
        case cqlParser.QUOTEDIDENTIFIER:
        case cqlParser.IDENTIFIER:
        case cqlParser.DELIMITEDIDENTIFIER:
            this.state = 935;
            this.tupleElementSelector();
            this.state = 940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===cqlParser.T__14) {
                this.state = 936;
                this.match(cqlParser.T__14);
                this.state = 937;
                this.tupleElementSelector();
                this.state = 942;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 945;
        this.match(cqlParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TupleElementSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_tupleElementSelector;
    return this;
}

TupleElementSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleElementSelectorContext.prototype.constructor = TupleElementSelectorContext;

TupleElementSelectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TupleElementSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TupleElementSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTupleElementSelector(this);
	}
};

TupleElementSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTupleElementSelector(this);
	}
};

TupleElementSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTupleElementSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.TupleElementSelectorContext = TupleElementSelectorContext;

cqlParser.prototype.tupleElementSelector = function() {

    var localctx = new TupleElementSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, cqlParser.RULE_tupleElementSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.identifier();
        this.state = 948;
        this.match(cqlParser.T__10);
        this.state = 949;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstanceSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_instanceSelector;
    return this;
}

InstanceSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceSelectorContext.prototype.constructor = InstanceSelectorContext;

InstanceSelectorContext.prototype.namedTypeSpecifier = function() {
    return this.getTypedRuleContext(NamedTypeSpecifierContext,0);
};

InstanceSelectorContext.prototype.instanceElementSelector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InstanceElementSelectorContext);
    } else {
        return this.getTypedRuleContext(InstanceElementSelectorContext,i);
    }
};

InstanceSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInstanceSelector(this);
	}
};

InstanceSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInstanceSelector(this);
	}
};

InstanceSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInstanceSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.InstanceSelectorContext = InstanceSelectorContext;

cqlParser.prototype.instanceSelector = function() {

    var localctx = new InstanceSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, cqlParser.RULE_instanceSelector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this.namedTypeSpecifier();
        this.state = 952;
        this.match(cqlParser.T__13);
        this.state = 962;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__10:
            this.state = 953;
            this.match(cqlParser.T__10);
            break;
        case cqlParser.T__1:
        case cqlParser.T__17:
        case cqlParser.T__19:
        case cqlParser.T__85:
        case cqlParser.T__86:
        case cqlParser.T__87:
        case cqlParser.T__100:
        case cqlParser.T__101:
        case cqlParser.T__145:
        case cqlParser.T__146:
        case cqlParser.T__147:
        case cqlParser.QUOTEDIDENTIFIER:
        case cqlParser.IDENTIFIER:
        case cqlParser.DELIMITEDIDENTIFIER:
            this.state = 954;
            this.instanceElementSelector();
            this.state = 959;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===cqlParser.T__14) {
                this.state = 955;
                this.match(cqlParser.T__14);
                this.state = 956;
                this.instanceElementSelector();
                this.state = 961;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 964;
        this.match(cqlParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstanceElementSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_instanceElementSelector;
    return this;
}

InstanceElementSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceElementSelectorContext.prototype.constructor = InstanceElementSelectorContext;

InstanceElementSelectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

InstanceElementSelectorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InstanceElementSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterInstanceElementSelector(this);
	}
};

InstanceElementSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitInstanceElementSelector(this);
	}
};

InstanceElementSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitInstanceElementSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.InstanceElementSelectorContext = InstanceElementSelectorContext;

cqlParser.prototype.instanceElementSelector = function() {

    var localctx = new InstanceElementSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, cqlParser.RULE_instanceElementSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 966;
        this.identifier();
        this.state = 967;
        this.match(cqlParser.T__10);
        this.state = 968;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_listSelector;
    return this;
}

ListSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListSelectorContext.prototype.constructor = ListSelectorContext;

ListSelectorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ListSelectorContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

ListSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterListSelector(this);
	}
};

ListSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitListSelector(this);
	}
};

ListSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitListSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ListSelectorContext = ListSelectorContext;

cqlParser.prototype.listSelector = function() {

    var localctx = new ListSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, cqlParser.RULE_listSelector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===cqlParser.T__20) {
            this.state = 970;
            this.match(cqlParser.T__20);
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===cqlParser.T__21) {
                this.state = 971;
                this.match(cqlParser.T__21);
                this.state = 972;
                this.typeSpecifier();
                this.state = 973;
                this.match(cqlParser.T__22);
            }

        }

        this.state = 979;
        this.match(cqlParser.T__13);
        this.state = 988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__29))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (cqlParser.T__36 - 37)) | (1 << (cqlParser.T__43 - 37)) | (1 << (cqlParser.T__51 - 37)) | (1 << (cqlParser.T__52 - 37)) | (1 << (cqlParser.T__53 - 37)) | (1 << (cqlParser.T__54 - 37)) | (1 << (cqlParser.T__56 - 37)) | (1 << (cqlParser.T__57 - 37)) | (1 << (cqlParser.T__61 - 37)) | (1 << (cqlParser.T__62 - 37)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (cqlParser.T__77 - 78)) | (1 << (cqlParser.T__78 - 78)) | (1 << (cqlParser.T__79 - 78)) | (1 << (cqlParser.T__80 - 78)) | (1 << (cqlParser.T__81 - 78)) | (1 << (cqlParser.T__82 - 78)) | (1 << (cqlParser.T__83 - 78)) | (1 << (cqlParser.T__84 - 78)) | (1 << (cqlParser.T__85 - 78)) | (1 << (cqlParser.T__86 - 78)) | (1 << (cqlParser.T__87 - 78)) | (1 << (cqlParser.T__88 - 78)) | (1 << (cqlParser.T__89 - 78)) | (1 << (cqlParser.T__90 - 78)) | (1 << (cqlParser.T__91 - 78)) | (1 << (cqlParser.T__92 - 78)) | (1 << (cqlParser.T__93 - 78)) | (1 << (cqlParser.T__94 - 78)) | (1 << (cqlParser.T__95 - 78)) | (1 << (cqlParser.T__96 - 78)) | (1 << (cqlParser.T__98 - 78)) | (1 << (cqlParser.T__99 - 78)) | (1 << (cqlParser.T__100 - 78)) | (1 << (cqlParser.T__101 - 78)) | (1 << (cqlParser.T__103 - 78)) | (1 << (cqlParser.T__104 - 78)) | (1 << (cqlParser.T__105 - 78)) | (1 << (cqlParser.T__106 - 78)) | (1 << (cqlParser.T__107 - 78)) | (1 << (cqlParser.T__108 - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (cqlParser.T__109 - 110)) | (1 << (cqlParser.T__116 - 110)) | (1 << (cqlParser.T__119 - 110)) | (1 << (cqlParser.T__120 - 110)) | (1 << (cqlParser.T__121 - 110)) | (1 << (cqlParser.T__122 - 110)))) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (cqlParser.T__145 - 146)) | (1 << (cqlParser.T__146 - 146)) | (1 << (cqlParser.T__147 - 146)) | (1 << (cqlParser.T__148 - 146)) | (1 << (cqlParser.T__149 - 146)) | (1 << (cqlParser.T__150 - 146)) | (1 << (cqlParser.T__151 - 146)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 146)) | (1 << (cqlParser.DATETIME - 146)) | (1 << (cqlParser.TIME - 146)) | (1 << (cqlParser.IDENTIFIER - 146)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 146)) | (1 << (cqlParser.STRING - 146)) | (1 << (cqlParser.NUMBER - 146)))) !== 0)) {
            this.state = 980;
            this.expression(0);
            this.state = 985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===cqlParser.T__14) {
                this.state = 981;
                this.match(cqlParser.T__14);
                this.state = 982;
                this.expression(0);
                this.state = 987;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 990;
        this.match(cqlParser.T__15);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DisplayClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_displayClause;
    return this;
}

DisplayClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DisplayClauseContext.prototype.constructor = DisplayClauseContext;

DisplayClauseContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

DisplayClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterDisplayClause(this);
	}
};

DisplayClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitDisplayClause(this);
	}
};

DisplayClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitDisplayClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.DisplayClauseContext = DisplayClauseContext;

cqlParser.prototype.displayClause = function() {

    var localctx = new DisplayClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, cqlParser.RULE_displayClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 992;
        this.match(cqlParser.T__145);
        this.state = 993;
        this.match(cqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodeSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_codeSelector;
    return this;
}

CodeSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodeSelectorContext.prototype.constructor = CodeSelectorContext;

CodeSelectorContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

CodeSelectorContext.prototype.codesystemIdentifier = function() {
    return this.getTypedRuleContext(CodesystemIdentifierContext,0);
};

CodeSelectorContext.prototype.displayClause = function() {
    return this.getTypedRuleContext(DisplayClauseContext,0);
};

CodeSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterCodeSelector(this);
	}
};

CodeSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitCodeSelector(this);
	}
};

CodeSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitCodeSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.CodeSelectorContext = CodeSelectorContext;

cqlParser.prototype.codeSelector = function() {

    var localctx = new CodeSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, cqlParser.RULE_codeSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this.match(cqlParser.T__146);
        this.state = 996;
        this.match(cqlParser.STRING);
        this.state = 997;
        this.match(cqlParser.T__18);
        this.state = 998;
        this.codesystemIdentifier();
        this.state = 1000;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 999;
            this.displayClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConceptSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_conceptSelector;
    return this;
}

ConceptSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConceptSelectorContext.prototype.constructor = ConceptSelectorContext;

ConceptSelectorContext.prototype.codeSelector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodeSelectorContext);
    } else {
        return this.getTypedRuleContext(CodeSelectorContext,i);
    }
};

ConceptSelectorContext.prototype.displayClause = function() {
    return this.getTypedRuleContext(DisplayClauseContext,0);
};

ConceptSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterConceptSelector(this);
	}
};

ConceptSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitConceptSelector(this);
	}
};

ConceptSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitConceptSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ConceptSelectorContext = ConceptSelectorContext;

cqlParser.prototype.conceptSelector = function() {

    var localctx = new ConceptSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, cqlParser.RULE_conceptSelector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this.match(cqlParser.T__147);
        this.state = 1003;
        this.match(cqlParser.T__13);
        this.state = 1004;
        this.codeSelector();
        this.state = 1009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__14) {
            this.state = 1005;
            this.match(cqlParser.T__14);
            this.state = 1006;
            this.codeSelector();
            this.state = 1011;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1012;
        this.match(cqlParser.T__15);
        this.state = 1014;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 1013;
            this.displayClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(cqlParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.DELIMITEDIDENTIFIER = function() {
    return this.getToken(cqlParser.DELIMITEDIDENTIFIER, 0);
};

IdentifierContext.prototype.QUOTEDIDENTIFIER = function() {
    return this.getToken(cqlParser.QUOTEDIDENTIFIER, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.IdentifierContext = IdentifierContext;

cqlParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, cqlParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1016;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (cqlParser.T__85 - 86)) | (1 << (cqlParser.T__86 - 86)) | (1 << (cqlParser.T__87 - 86)) | (1 << (cqlParser.T__100 - 86)) | (1 << (cqlParser.T__101 - 86)))) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (cqlParser.T__145 - 146)) | (1 << (cqlParser.T__146 - 146)) | (1 << (cqlParser.T__147 - 146)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 146)) | (1 << (cqlParser.IDENTIFIER - 146)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 146)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExternalConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_externalConstant;
    return this;
}

ExternalConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalConstantContext.prototype.constructor = ExternalConstantContext;

ExternalConstantContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExternalConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterExternalConstant(this);
	}
};

ExternalConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitExternalConstant(this);
	}
};

ExternalConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitExternalConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ExternalConstantContext = ExternalConstantContext;

cqlParser.prototype.externalConstant = function() {

    var localctx = new ExternalConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, cqlParser.RULE_externalConstant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1018;
        this.match(cqlParser.T__148);
        this.state = 1019;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_invocation;
    return this;
}

InvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InvocationContext.prototype.constructor = InvocationContext;


 
InvocationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TotalInvocationContext(parser, ctx) {
	InvocationContext.call(this, parser);
    InvocationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TotalInvocationContext.prototype = Object.create(InvocationContext.prototype);
TotalInvocationContext.prototype.constructor = TotalInvocationContext;

cqlParser.TotalInvocationContext = TotalInvocationContext;

TotalInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterTotalInvocation(this);
	}
};

TotalInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitTotalInvocation(this);
	}
};

TotalInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitTotalInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ThisInvocationContext(parser, ctx) {
	InvocationContext.call(this, parser);
    InvocationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisInvocationContext.prototype = Object.create(InvocationContext.prototype);
ThisInvocationContext.prototype.constructor = ThisInvocationContext;

cqlParser.ThisInvocationContext = ThisInvocationContext;

ThisInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterThisInvocation(this);
	}
};

ThisInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitThisInvocation(this);
	}
};

ThisInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitThisInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IndexInvocationContext(parser, ctx) {
	InvocationContext.call(this, parser);
    InvocationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexInvocationContext.prototype = Object.create(InvocationContext.prototype);
IndexInvocationContext.prototype.constructor = IndexInvocationContext;

cqlParser.IndexInvocationContext = IndexInvocationContext;

IndexInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterIndexInvocation(this);
	}
};

IndexInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitIndexInvocation(this);
	}
};

IndexInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitIndexInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionInvocationContext(parser, ctx) {
	InvocationContext.call(this, parser);
    InvocationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionInvocationContext.prototype = Object.create(InvocationContext.prototype);
FunctionInvocationContext.prototype.constructor = FunctionInvocationContext;

cqlParser.FunctionInvocationContext = FunctionInvocationContext;

FunctionInvocationContext.prototype.func = function() {
    return this.getTypedRuleContext(FuncContext,0);
};
FunctionInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterFunctionInvocation(this);
	}
};

FunctionInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitFunctionInvocation(this);
	}
};

FunctionInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitFunctionInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberInvocationContext(parser, ctx) {
	InvocationContext.call(this, parser);
    InvocationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberInvocationContext.prototype = Object.create(InvocationContext.prototype);
MemberInvocationContext.prototype.constructor = MemberInvocationContext;

cqlParser.MemberInvocationContext = MemberInvocationContext;

MemberInvocationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
MemberInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterMemberInvocation(this);
	}
};

MemberInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitMemberInvocation(this);
	}
};

MemberInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitMemberInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};



cqlParser.InvocationContext = InvocationContext;

cqlParser.prototype.invocation = function() {

    var localctx = new InvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, cqlParser.RULE_invocation);
    try {
        this.state = 1026;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            localctx = new MemberInvocationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.identifier();
            break;

        case 2:
            localctx = new FunctionInvocationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1022;
            this.func();
            break;

        case 3:
            localctx = new ThisInvocationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1023;
            this.match(cqlParser.T__149);
            break;

        case 4:
            localctx = new IndexInvocationContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1024;
            this.match(cqlParser.T__150);
            break;

        case 5:
            localctx = new TotalInvocationContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1025;
            this.match(cqlParser.T__151);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_func;
    return this;
}

FuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncContext.prototype.constructor = FuncContext;

FuncContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FuncContext.prototype.paramList = function() {
    return this.getTypedRuleContext(ParamListContext,0);
};

FuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterFunc(this);
	}
};

FuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitFunc(this);
	}
};

FuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitFunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.FuncContext = FuncContext;

cqlParser.prototype.func = function() {

    var localctx = new FuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, cqlParser.RULE_func);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1028;
        this.identifier();
        this.state = 1029;
        this.match(cqlParser.T__29);
        this.state = 1031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__29))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (cqlParser.T__36 - 37)) | (1 << (cqlParser.T__43 - 37)) | (1 << (cqlParser.T__51 - 37)) | (1 << (cqlParser.T__52 - 37)) | (1 << (cqlParser.T__53 - 37)) | (1 << (cqlParser.T__54 - 37)) | (1 << (cqlParser.T__56 - 37)) | (1 << (cqlParser.T__57 - 37)) | (1 << (cqlParser.T__61 - 37)) | (1 << (cqlParser.T__62 - 37)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (cqlParser.T__77 - 78)) | (1 << (cqlParser.T__78 - 78)) | (1 << (cqlParser.T__79 - 78)) | (1 << (cqlParser.T__80 - 78)) | (1 << (cqlParser.T__81 - 78)) | (1 << (cqlParser.T__82 - 78)) | (1 << (cqlParser.T__83 - 78)) | (1 << (cqlParser.T__84 - 78)) | (1 << (cqlParser.T__85 - 78)) | (1 << (cqlParser.T__86 - 78)) | (1 << (cqlParser.T__87 - 78)) | (1 << (cqlParser.T__88 - 78)) | (1 << (cqlParser.T__89 - 78)) | (1 << (cqlParser.T__90 - 78)) | (1 << (cqlParser.T__91 - 78)) | (1 << (cqlParser.T__92 - 78)) | (1 << (cqlParser.T__93 - 78)) | (1 << (cqlParser.T__94 - 78)) | (1 << (cqlParser.T__95 - 78)) | (1 << (cqlParser.T__96 - 78)) | (1 << (cqlParser.T__98 - 78)) | (1 << (cqlParser.T__99 - 78)) | (1 << (cqlParser.T__100 - 78)) | (1 << (cqlParser.T__101 - 78)) | (1 << (cqlParser.T__103 - 78)) | (1 << (cqlParser.T__104 - 78)) | (1 << (cqlParser.T__105 - 78)) | (1 << (cqlParser.T__106 - 78)) | (1 << (cqlParser.T__107 - 78)) | (1 << (cqlParser.T__108 - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (cqlParser.T__109 - 110)) | (1 << (cqlParser.T__116 - 110)) | (1 << (cqlParser.T__119 - 110)) | (1 << (cqlParser.T__120 - 110)) | (1 << (cqlParser.T__121 - 110)) | (1 << (cqlParser.T__122 - 110)))) !== 0) || ((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (cqlParser.T__145 - 146)) | (1 << (cqlParser.T__146 - 146)) | (1 << (cqlParser.T__147 - 146)) | (1 << (cqlParser.T__148 - 146)) | (1 << (cqlParser.T__149 - 146)) | (1 << (cqlParser.T__150 - 146)) | (1 << (cqlParser.T__151 - 146)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 146)) | (1 << (cqlParser.DATETIME - 146)) | (1 << (cqlParser.TIME - 146)) | (1 << (cqlParser.IDENTIFIER - 146)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 146)) | (1 << (cqlParser.STRING - 146)) | (1 << (cqlParser.NUMBER - 146)))) !== 0)) {
            this.state = 1030;
            this.paramList();
        }

        this.state = 1033;
        this.match(cqlParser.T__30);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_paramList;
    return this;
}

ParamListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamListContext.prototype.constructor = ParamListContext;

ParamListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ParamListContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterParamList(this);
	}
};

ParamListContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitParamList(this);
	}
};

ParamListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitParamList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.ParamListContext = ParamListContext;

cqlParser.prototype.paramList = function() {

    var localctx = new ParamListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, cqlParser.RULE_paramList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1035;
        this.expression(0);
        this.state = 1040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===cqlParser.T__14) {
            this.state = 1036;
            this.match(cqlParser.T__14);
            this.state = 1037;
            this.expression(0);
            this.state = 1042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuantityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_quantity;
    return this;
}

QuantityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuantityContext.prototype.constructor = QuantityContext;

QuantityContext.prototype.NUMBER = function() {
    return this.getToken(cqlParser.NUMBER, 0);
};

QuantityContext.prototype.unit = function() {
    return this.getTypedRuleContext(UnitContext,0);
};

QuantityContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterQuantity(this);
	}
};

QuantityContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitQuantity(this);
	}
};

QuantityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitQuantity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.QuantityContext = QuantityContext;

cqlParser.prototype.quantity = function() {

    var localctx = new QuantityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, cqlParser.RULE_quantity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1043;
        this.match(cqlParser.NUMBER);
        this.state = 1045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        if(la_===1) {
            this.state = 1044;
            this.unit();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = cqlParser.RULE_unit;
    return this;
}

UnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitContext.prototype.constructor = UnitContext;

UnitContext.prototype.dateTimePrecision = function() {
    return this.getTypedRuleContext(DateTimePrecisionContext,0);
};

UnitContext.prototype.pluralDateTimePrecision = function() {
    return this.getTypedRuleContext(PluralDateTimePrecisionContext,0);
};

UnitContext.prototype.STRING = function() {
    return this.getToken(cqlParser.STRING, 0);
};

UnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.enterUnit(this);
	}
};

UnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof cqlListener ) {
        listener.exitUnit(this);
	}
};

UnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof cqlVisitor ) {
        return visitor.visitUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




cqlParser.UnitContext = UnitContext;

cqlParser.prototype.unit = function() {

    var localctx = new UnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, cqlParser.RULE_unit);
    try {
        this.state = 1050;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case cqlParser.T__77:
        case cqlParser.T__78:
        case cqlParser.T__79:
        case cqlParser.T__80:
        case cqlParser.T__81:
        case cqlParser.T__82:
        case cqlParser.T__83:
        case cqlParser.T__84:
            this.enterOuterAlt(localctx, 1);
            this.state = 1047;
            this.dateTimePrecision();
            break;
        case cqlParser.T__88:
        case cqlParser.T__89:
        case cqlParser.T__90:
        case cqlParser.T__91:
        case cqlParser.T__92:
        case cqlParser.T__93:
        case cqlParser.T__94:
        case cqlParser.T__95:
            this.enterOuterAlt(localctx, 2);
            this.state = 1048;
            this.pluralDateTimePrecision();
            break;
        case cqlParser.STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 1049;
            this.match(cqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


cqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 53:
			return this.expression_sempred(localctx, predIndex);
	case 57:
			return this.expressionTerm_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

cqlParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 8);
		case 1:
			return this.precpred(this._ctx, 7);
		case 2:
			return this.precpred(this._ctx, 6);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		case 8:
			return this.precpred(this._ctx, 16);
		case 9:
			return this.precpred(this._ctx, 15);
		case 10:
			return this.precpred(this._ctx, 11);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

cqlParser.prototype.expressionTerm_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 7);
		case 12:
			return this.precpred(this._ctx, 6);
		case 13:
			return this.precpred(this._ctx, 5);
		case 14:
			return this.precpred(this._ctx, 21);
		case 15:
			return this.precpred(this._ctx, 20);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.cqlParser = cqlParser;
